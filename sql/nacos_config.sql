/*
 Navicat Premium Data Transfer

 Source Server         : rancher-midware
 Source Server Type    : MySQL
 Source Server Version : 80028
 Source Host           : 112.74.107.230:3306
 Source Schema         : nacos_config

 Target Server Type    : MySQL
 Target Server Version : 80028
 File Encoding         : 65001

 Date: 25/04/2022 16:35:54
*/

SET NAMES utf8mb4;
SET FOREIGN_KEY_CHECKS = 0;

-- ----------------------------
-- Table structure for config_info
-- ----------------------------
DROP TABLE IF EXISTS `config_info`;
CREATE TABLE `config_info` (
  `id` bigint NOT NULL AUTO_INCREMENT COMMENT 'id',
  `data_id` varchar(255) CHARACTER SET utf8 COLLATE utf8_bin NOT NULL COMMENT 'data_id',
  `group_id` varchar(255) CHARACTER SET utf8 COLLATE utf8_bin DEFAULT NULL,
  `content` longtext CHARACTER SET utf8 COLLATE utf8_bin NOT NULL COMMENT 'content',
  `md5` varchar(32) CHARACTER SET utf8 COLLATE utf8_bin DEFAULT NULL COMMENT 'md5',
  `gmt_create` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT '创建时间',
  `gmt_modified` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT '修改时间',
  `src_user` text CHARACTER SET utf8 COLLATE utf8_bin COMMENT 'source user',
  `src_ip` varchar(50) CHARACTER SET utf8 COLLATE utf8_bin DEFAULT NULL COMMENT 'source ip',
  `app_name` varchar(128) CHARACTER SET utf8 COLLATE utf8_bin DEFAULT NULL,
  `tenant_id` varchar(128) CHARACTER SET utf8 COLLATE utf8_bin DEFAULT '' COMMENT '租户字段',
  `c_desc` varchar(256) CHARACTER SET utf8 COLLATE utf8_bin DEFAULT NULL,
  `c_use` varchar(64) CHARACTER SET utf8 COLLATE utf8_bin DEFAULT NULL,
  `effect` varchar(64) CHARACTER SET utf8 COLLATE utf8_bin DEFAULT NULL,
  `type` varchar(64) CHARACTER SET utf8 COLLATE utf8_bin DEFAULT NULL,
  `c_schema` text CHARACTER SET utf8 COLLATE utf8_bin,
  PRIMARY KEY (`id`),
  UNIQUE KEY `uk_configinfo_datagrouptenant` (`data_id`,`group_id`,`tenant_id`)
) ENGINE=InnoDB AUTO_INCREMENT=24 DEFAULT CHARSET=utf8mb3 COLLATE=utf8_bin COMMENT='config_info';

-- ----------------------------
-- Records of config_info
-- ----------------------------
BEGIN;
INSERT INTO `config_info` VALUES (13, 'dcloud-account-service-dev.properties', 'DEFAULT_GROUP', 'server.port=8001\nspring.application.name=dcloud-account-service\n\n#----------服务注册和发现--------------\nspring.cloud.nacos.discovery.server-addr=120.24.7.58:8848\nspring.cloud.nacos.discovery.username=nacos\nspring.cloud.nacos.discovery.password=nacos\n\n\n#用于rpc调用token验证\nrpc.token=xdclass.net168\n\n#-------redis连接配置-------\nspring.redis.client-type=jedis\nspring.redis.host=120.24.7.58\nspring.redis.password=xdclass.net\nspring.redis.port=6379\nspring.redis.jedis.pool.max-active=100\nspring.redis.jedis.pool.max-idle=100\nspring.redis.jedis.pool.min-idle=100\nspring.redis.jedis.pool.max-wait=60000\n\n#-------分库分表数据源配置-------\nspring.shardingsphere.datasource.names=ds0\nspring.shardingsphere.datasource.ds0.connectionTimeoutMilliseconds=30000\nspring.shardingsphere.datasource.ds0.driver-class-name=com.mysql.cj.jdbc.Driver\nspring.shardingsphere.datasource.ds0.idleTimeoutMilliseconds=60000\nspring.shardingsphere.datasource.ds0.jdbc-url=jdbc:mysql://120.79.150.146:3306/dcloud_account?useUnicode=true&characterEncoding=utf-8&useSSL=false&serverTimezone=Asia/Shanghai&allowPublicKeyRetrieval=true\nspring.shardingsphere.datasource.ds0.maintenanceIntervalMilliseconds=30000\nspring.shardingsphere.datasource.ds0.maxLifetimeMilliseconds=1800000\nspring.shardingsphere.datasource.ds0.maxPoolSize=50\nspring.shardingsphere.datasource.ds0.minPoolSize=50\nspring.shardingsphere.datasource.ds0.password=xdclass.net168\nspring.shardingsphere.datasource.ds0.type=com.zaxxer.hikari.HikariDataSource\nspring.shardingsphere.datasource.ds0.username=root\nspring.shardingsphere.props.sql.show=true\n\n# 指定traffic表的数据分布情况，配置数据节点,行表达式标识符使用 ${...} 或 $->{...}，但前者与 Spring 本身的文件占位符冲突，所以在 Spring 环境中建议使用 $->{...}\nspring.shardingsphere.sharding.tables.traffic.actual-data-nodes=ds0.traffic_$->{0..1}\n#水平分表策略+行表达式分片\nspring.shardingsphere.sharding.tables.traffic.table-strategy.inline.algorithm-expression=traffic_$->{ account_no % 2 }\nspring.shardingsphere.sharding.tables.traffic.table-strategy.inline.sharding-column=account_no\n\n#id生成策略\nspring.shardingsphere.sharding.tables.traffic.key-generator.column=id\nspring.shardingsphere.sharding.tables.traffic.key-generator.props.worker.id=${workId}\nspring.shardingsphere.sharding.tables.traffic.key-generator.type=SNOWFLAKE\n\n#----------sms短信配置--------------\nsms.app-code=6999d4df3e7d48028470bbe517169a8d\nsms.template-id=M72CB42894\n\n#----------阿里云OSS配置--------------\naliyun.oss.endpoint=oss-cn-guangzhou.aliyuncs.com\naliyun.oss.access-key-id=LTAI5tHVGvYw7twoVFyruB1H\naliyun.oss.access-key-secret=r4d0EudzSvPfVMb9Zp0TfmsE32RXmN\naliyun.oss.bucketname=dcloud-link\n\n\n\n\n##----------rabbit配置--------------\nspring.rabbitmq.host=112.74.107.230\nspring.rabbitmq.port=5672\n#需要手工创建虚拟主机\nspring.rabbitmq.virtual-host=dev\nspring.rabbitmq.username=admin\nspring.rabbitmq.password=password\n#消息确认方式，manual(手动ack) 和auto(自动ack); 消息消费重试到达指定次数进到异常交换机和异常队列，需要改为自动ack确认消息\nspring.rabbitmq.listener.simple.acknowledge-mode=auto\n\n\n#开启重试，消费者代码不能添加try catch捕获不往外抛异常\nspring.rabbitmq.listener.simple.retry.enabled=true\n#最大重试次数\nspring.rabbitmq.listener.simple.retry.max-attempts=4\n# 重试消息的时间间隔，5秒\nspring.rabbitmq.listener.simple.retry.initial-interval=5000\n\n\n\n\n#----------xxl-job配置--------------\nlogging.config=classpath:logback.xml\n#调度中心部署地址,多个配置逗号分隔 \"http://address01,http://address02\"\nxxl.job.admin.addresses=http://112.74.107.230:8080/xxl-job-admin\n\n#执行器token，非空时启用 xxl-job, access token\nxxl.job.accessToken=xdclass.net\n\n# 执行器app名称,和控制台那边配置一样的名称，不然注册不上去\nxxl.job.executor.appname=traffic-app-executor\n\n# [选填]执行器注册：优先使用该配置作为注册地址，为空时使用内嵌服务 ”IP:PORT“ 作为注册地址。\n#从而更灵活的支持容器类型执行器动态IP和动态映射端口问题。\nxxl.job.executor.address=\n\n#[选填]执行器IP ：默认为空表示自动获取IP（即springboot容器的ip和端口，可以自动获取，也可以指定），多网卡时可手动设置指定IP，该IP不会绑定Host仅作为通讯实用；地址信息用于 \"执行器注册\" 和 \"调度中心请求并触发任务\"，\nxxl.job.executor.ip=\n\n# [选填]执行器端口号：小于等于0则自动获取；默认端口为9999，单机部署多个执行器时，注意要配置不同执行器端口；\nxxl.job.executor.port=9999\n\n#执行器日志文件存储路径，需要对该路径拥有读写权限；为空则使用默认路径\nxxl.job.executor.logpath=./data/logs/xxl-job/executor\n\n#执行器日志保存天数\nxxl.job.executor.logretentiondays=30\n\nlogging.level.com.alibaba.nacos.client.config.impl=WARN\nlogging.level.root=INFO', '30d54390746c33e2f6c29f4670260675', '2022-04-16 01:39:57', '2022-04-16 01:43:40', 'nacos', '172.31.101.9', '', '', '', '', '', 'properties', '');
INSERT INTO `config_info` VALUES (15, 'dcloud-data-service-dev.properties', 'DEFAULT_GROUP', 'server.port=8002\nspring.application.name=dcloud-data-service\n\n#----------服务注册和发现--------------\nspring.cloud.nacos.discovery.server-addr=120.24.7.58:8848\nspring.cloud.nacos.discovery.username=nacos\nspring.cloud.nacos.discovery.password=nacos\n\nspring.datasource.driver-class-name=ru.yandex.clickhouse.ClickHouseDriver\n\nspring.datasource.url=jdbc:clickhouse://120.24.7.58:8123/default\n\nmybatis-plus.configuration.log-impl=org.apache.ibatis.logging.stdout.StdOutImpl\n\nlogging.level.com.alibaba.nacos.client.config.impl=WARN\nlogging.level.root=INFO\n\n\n\n#-------redis连接配置-------\nspring.redis.client-type=jedis\nspring.redis.host=120.24.7.58\nspring.redis.password=xdclass.net\nspring.redis.port=6379\nspring.redis.jedis.pool.max-active=100\nspring.redis.jedis.pool.max-idle=100\nspring.redis.jedis.pool.min-idle=100\nspring.redis.jedis.pool.max-wait=60000\n', 'dcc388fe8df8701b7461f1db48c71e35', '2022-04-16 01:53:56', '2022-04-16 01:54:36', 'nacos', '172.31.101.9', '', '', '', '', '', 'properties', '');
INSERT INTO `config_info` VALUES (17, 'dcloud-shop-service-dev.properties', 'DEFAULT_GROUP', 'server.port=8005\nspring.application.name=dcloud-shop-service\n\n#----------服务注册和发现--------------\nspring.cloud.nacos.discovery.server-addr=120.24.7.58:8848\nspring.cloud.nacos.discovery.username=nacos\nspring.cloud.nacos.discovery.password=nacos\n\n\n\n#-------分库分表数据源配置-------\nspring.shardingsphere.datasource.names=ds0\nspring.shardingsphere.datasource.ds0.connectionTimeoutMilliseconds=30000\nspring.shardingsphere.datasource.ds0.driver-class-name=com.mysql.cj.jdbc.Driver\nspring.shardingsphere.datasource.ds0.idleTimeoutMilliseconds=60000\nspring.shardingsphere.datasource.ds0.jdbc-url=jdbc:mysql://120.79.150.146:3306/dcloud_shop?useUnicode=true&characterEncoding=utf-8&useSSL=false&serverTimezone=Asia/Shanghai&allowPublicKeyRetrieval=true\nspring.shardingsphere.datasource.ds0.maintenanceIntervalMilliseconds=30000\nspring.shardingsphere.datasource.ds0.maxLifetimeMilliseconds=1800000\nspring.shardingsphere.datasource.ds0.maxPoolSize=50\nspring.shardingsphere.datasource.ds0.minPoolSize=50\nspring.shardingsphere.datasource.ds0.password=xdclass.net168\nspring.shardingsphere.datasource.ds0.type=com.zaxxer.hikari.HikariDataSource\nspring.shardingsphere.datasource.ds0.username=root\nspring.shardingsphere.props.sql.show=true\n\n\n\n#----------配置默认数据库，比如短链域名，不分库分表--------------\nspring.shardingsphere.sharding.default-data-source-name=ds0\n#默认id生成策略\nspring.shardingsphere.sharding.default-key-generator.column=id\nspring.shardingsphere.sharding.default-key-generator.type=SNOWFLAKE\nspring.shardingsphere.sharding.default-key-generator.props.worker.id=${workerId}\n\n\n# 指定product_order表的数据分布情况，配置数据节点,行表达式标识符使用 ${...} 或 $->{...}，但前者与 Spring 本身的文件占位符冲突，所以在 Spring 环境中建议使用 $->{...}\nspring.shardingsphere.sharding.tables.product_order.actual-data-nodes=ds0.product_order_$->{0..1}\n#水平分表策略+行表达式分片\nspring.shardingsphere.sharding.tables.product_order.table-strategy.inline.algorithm-expression=product_order_$->{ account_no % 2 }\nspring.shardingsphere.sharding.tables.product_order.table-strategy.inline.sharding-column=account_no\n\n\n\n\n#-------redis连接配置-------\nspring.redis.client-type=jedis\nspring.redis.host=120.24.7.58\nspring.redis.password=xdclass.net\nspring.redis.port=6379\nspring.redis.jedis.pool.max-active=100\nspring.redis.jedis.pool.max-idle=100\nspring.redis.jedis.pool.min-idle=100\nspring.redis.jedis.pool.max-wait=60000\n\n\n\n##----------rabbit配置--------------\nspring.rabbitmq.host=112.74.107.230\nspring.rabbitmq.port=5672\n#需要手工创建虚拟主机\nspring.rabbitmq.virtual-host=dev\nspring.rabbitmq.username=admin\nspring.rabbitmq.password=password\n#消息确认方式，manual(手动ack) 和auto(自动ack); 消息消费重试到达指定次数进到异常交换机和异常队列，需要改为自动ack确认消息\nspring.rabbitmq.listener.simple.acknowledge-mode=auto\n\n\n#开启重试，消费者代码不能添加try catch捕获不往外抛异常\nspring.rabbitmq.listener.simple.retry.enabled=true\n#最大重试次数\nspring.rabbitmq.listener.simple.retry.max-attempts=4\n# 重试消息的时间间隔，5秒\nspring.rabbitmq.listener.simple.retry.initial-interval=5000\n\n\n\n##----------微信支付参数--------------\n\n#商户号\npay.wechat.mch-id=1601644442\n#公众号id 需要和商户号绑定\npay.wechat.wx-pay-appid=wx5beac15ca207c40c\n#商户证书序列号,需要和证书对应\npay.wechat.mch-serial-no=7064ADC5FE84CA2A3DDE71A692E39602DEB96E61\n#API V3密钥\npay.wechat.api-v3-key=adP9a0wWjITE5n2oKNP5lfYesxdclass\n\n#商户私钥路径（微信服务端会根据证书序列号，找到证书获取公钥进行解密数据）\npay.wechat.private-key-path=classpath:/cert/apiclient_key.pem\n#支付成功页面跳转\npay.wechat.success-return-url=https://xdclass.net\n#支付成功，回调通知\npay.wechat.callback-url=http://api.link.open1024.com/shop-server/api/callback/order/v1/wechat\n\n\n\n\nlogging.level.com.alibaba.nacos.client.config.impl=WARN\nlogging.level.root=INFO', '46695978d7a61a50bfb0b166832539f7', '2022-04-16 01:58:39', '2022-04-24 05:41:29', 'nacos', '172.31.101.9', '', '', '', '', '', 'properties', '');
INSERT INTO `config_info` VALUES (18, 'dcloud-link-service-dev.properties', 'DEFAULT_GROUP', 'server.port=8003\nspring.application.name=dcloud-link-service\n\n#服务注册发现\nspring.cloud.nacos.discovery.server-addr=120.24.7.58:8848\nspring.cloud.nacos.discovery.username=nacos\nspring.cloud.nacos.discovery.password=nacos\n\n\n#用于rpc调用token验证\nrpc.token=xdclass.net168\n\n#分库分表配置\nspring.shardingsphere.datasource.names=ds0,ds1,dsa\nspring.shardingsphere.props.sql.show=true\n\n#ds0配置\nspring.shardingsphere.datasource.ds0.connectionTimeoutMilliseconds=30000\nspring.shardingsphere.datasource.ds0.driver-class-name=com.mysql.cj.jdbc.Driver\nspring.shardingsphere.datasource.ds0.idleTimeoutMilliseconds=60000\nspring.shardingsphere.datasource.ds0.jdbc-url=jdbc:mysql://120.79.150.146:3306/dcloud_link_0?useUnicode=true&characterEncoding=utf-8&useSSL=false&serverTimezone=Asia/Shanghai&allowPublicKeyRetrieval=true\nspring.shardingsphere.datasource.ds0.type=com.zaxxer.hikari.HikariDataSource\nspring.shardingsphere.datasource.ds0.maintenanceIntervalMilliseconds=30000\nspring.shardingsphere.datasource.ds0.maxLifetimeMilliseconds=1800000\nspring.shardingsphere.datasource.ds0.maxPoolSize=50\nspring.shardingsphere.datasource.ds0.minPoolSize=50\nspring.shardingsphere.datasource.ds0.username=root\nspring.shardingsphere.datasource.ds0.password=xdclass.net168\n\n#ds1配置\nspring.shardingsphere.datasource.ds1.connectionTimeoutMilliseconds=30000\nspring.shardingsphere.datasource.ds1.driver-class-name=com.mysql.cj.jdbc.Driver\nspring.shardingsphere.datasource.ds1.idleTimeoutMilliseconds=60000\nspring.shardingsphere.datasource.ds1.jdbc-url=jdbc:mysql://120.79.150.146:3306/dcloud_link_1?useUnicode=true&characterEncoding=utf-8&useSSL=false&serverTimezone=Asia/Shanghai&allowPublicKeyRetrieval=true\nspring.shardingsphere.datasource.ds1.type=com.zaxxer.hikari.HikariDataSource\nspring.shardingsphere.datasource.ds1.maintenanceIntervalMilliseconds=30000\nspring.shardingsphere.datasource.ds1.maxLifetimeMilliseconds=1800000\nspring.shardingsphere.datasource.ds1.maxPoolSize=50\nspring.shardingsphere.datasource.ds1.minPoolSize=50\nspring.shardingsphere.datasource.ds1.username=root\nspring.shardingsphere.datasource.ds1.password=xdclass.net168\n\n#dsa配置\nspring.shardingsphere.datasource.dsa.connectionTimeoutMilliseconds=30000\nspring.shardingsphere.datasource.dsa.driver-class-name=com.mysql.cj.jdbc.Driver\nspring.shardingsphere.datasource.dsa.idleTimeoutMilliseconds=60000\nspring.shardingsphere.datasource.dsa.jdbc-url=jdbc:mysql://120.79.150.146:3306/dcloud_link_a?useUnicode=true&characterEncoding=utf-8&useSSL=false&serverTimezone=Asia/Shanghai&allowPublicKeyRetrieval=true\nspring.shardingsphere.datasource.dsa.type=com.zaxxer.hikari.HikariDataSource\nspring.shardingsphere.datasource.dsa.maintenanceIntervalMilliseconds=30000\nspring.shardingsphere.datasource.dsa.maxLifetimeMilliseconds=1800000\nspring.shardingsphere.datasource.dsa.maxPoolSize=50\nspring.shardingsphere.datasource.dsa.minPoolSize=50\nspring.shardingsphere.datasource.dsa.username=root\nspring.shardingsphere.datasource.dsa.password=xdclass.net168\n\n\n#----------配置默认数据库，比如短链域名，不分库分表--------------\nspring.shardingsphere.sharding.default-data-source-name=ds0\n#默认id生成策略\nspring.shardingsphere.sharding.default-key-generator.column=id\nspring.shardingsphere.sharding.default-key-generator.type=SNOWFLAKE\nspring.shardingsphere.sharding.default-key-generator.props.worker.id=${workerId}\n\n\n\n\n#----------短链组，策略：水平分库，水平分表(1张表)--------------\n# 先进行水平分库， 水平分库策略，行表达式分片\nspring.shardingsphere.sharding.tables.link_group.database-strategy.inline.sharding-column=account_no\nspring.shardingsphere.sharding.tables.link_group.database-strategy.inline.algorithm-expression=ds$->{account_no % 2}\n\n\n#----------短链，策略：分库+分表--------------\n# 先进行水平分库，然后再水平分表\nspring.shardingsphere.sharding.tables.short_link.database-strategy.standard.sharding-column=code\nspring.shardingsphere.sharding.tables.short_link.database-strategy.standard.precise-algorithm-class-name=net.xdclass.strategy.CustomDBPreciseShardingAlgorithm\n\n\n# 水平分表策略，自定义策略。   真实库.逻辑表\nspring.shardingsphere.sharding.tables.short_link.actual-data-nodes=ds0.short_link,ds1.short_link,dsa.short_link\nspring.shardingsphere.sharding.tables.short_link.table-strategy.standard.sharding-column=code\nspring.shardingsphere.sharding.tables.short_link.table-strategy.standard.precise-algorithm-class-name=net.xdclass.strategy.CustomTablePreciseShardingAlgorithm\n\n\n\n\n##---------- 组+短链码mapping表，策略：分库+分表--------------\n# 先进行水平分库，然后再水平分表， 水平分库策略，行表达式分片\nspring.shardingsphere.sharding.tables.group_code_mapping.database-strategy.inline.sharding-column=account_no\nspring.shardingsphere.sharding.tables.group_code_mapping.database-strategy.inline.algorithm-expression=ds$->{account_no % 2}\n\n# 分表策略+行表达式分片\nspring.shardingsphere.sharding.tables.group_code_mapping.actual-data-nodes=ds$->{0..1}.group_code_mapping_$->{0..1}\nspring.shardingsphere.sharding.tables.group_code_mapping.table-strategy.inline.sharding-column=group_id\nspring.shardingsphere.sharding.tables.group_code_mapping.table-strategy.inline.algorithm-expression=group_code_mapping_$->{group_id % 2}\n\n\n\n\n\n\n\n##----------rabbit配置--------------\nspring.rabbitmq.host=112.74.107.230\nspring.rabbitmq.port=5672\n#需要手工创建虚拟主机\nspring.rabbitmq.virtual-host=dev\nspring.rabbitmq.username=admin\nspring.rabbitmq.password=password\n#消息确认方式，manual(手动ack) 和auto(自动ack); 消息消费重试到达指定次数进到异常交换机和异常队列，需要改为自动ack确认消息\nspring.rabbitmq.listener.simple.acknowledge-mode=auto\n\n\n#开启重试，消费者代码不能添加try catch捕获不往外抛异常\nspring.rabbitmq.listener.simple.retry.enabled=true\n#最大重试次数\nspring.rabbitmq.listener.simple.retry.max-attempts=4\n# 重试消息的时间间隔，5秒\nspring.rabbitmq.listener.simple.retry.initial-interval=5000\n\n\n#-------redis连接配置-------\nspring.redis.client-type=jedis\nspring.redis.host=120.24.7.58\nspring.redis.password=xdclass.net\nspring.redis.port=6379\nspring.redis.jedis.pool.max-active=100\nspring.redis.jedis.pool.max-idle=100\nspring.redis.jedis.pool.min-idle=100\nspring.redis.jedis.pool.max-wait=60000\n\n\n#----------kafka配置--------------\nspring.kafka.bootstrap-servers=120.24.7.58:9092\nspring.kafka.producer.key-serializer=org.apache.kafka.common.serialization.StringSerializer\nspring.kafka.producer.value-serializer=org.apache.kafka.common.serialization.StringSerializer\n\n\nlogging.level.com.alibaba.nacos.client.config.impl=WARN\nlogging.level.root=INFO', '9de70c737128c6ab0abfea9b0a2ee423', '2022-04-16 02:02:22', '2022-04-16 02:15:40', 'nacos', '172.31.101.9', '', '', '', '', '', 'properties', '');
INSERT INTO `config_info` VALUES (20, 'dcloud-gateway-dev.yaml', 'DEFAULT_GROUP', 'server:\n  port: 80\n\n\n#应用名称\nspring:\n  application:\n    name: dcloud-gateway\n\n#服务注册发现\n  cloud:\n    nacos:\n      discovery:\n        server-addr: 120.24.7.58:8848\n        username: nacos\n        password: nacos\n\n\n    gateway:\n      routes: #数组形式\n        - id: dcloud-link-api-service  #数据服务 路由唯一标识\n          uri: lb://dcloud-link-service  #从nocas进行转发\n          order: 1 #优先级，数字越小优先级越高\n          predicates: #断言 配置哪个路径才转发，前端访问路径统一加上XXX-server，网关判断转发对应的服务，如果是回调业务记得修改\n            - Path=/* #匹配一个路径,用于短链解析\n\n        - id: dcloud-link-service  #数据服务 路由唯一标识\n          uri: lb://dcloud-link-service  #从nocas进行转发\n          order: 2 #优先级，数字越小优先级越高\n          predicates: #断言 配置哪个路径才转发，前端访问路径统一加上XXX-server，网关判断转发对应的服务，如果是回调业务记得修改\n            - Path=/link-server/**\n          filters: #过滤器，请求在传递过程中通过过滤器修改\n            - StripPrefix=1  #去掉第一层前缀，转发给后续的路径\n\n        - id: dcloud-data-service  #数据服务 路由唯一标识\n          uri: lb://dcloud-data-service  #从nocas进行转发\n          order: 3 #优先级，数字越小优先级越高\n          predicates: #断言 配置哪个路径才转发，前端访问路径统一加上XXX-server，网关判断转发对应的服务，如果是回调业务记得修改\n            - Path=/data-server/**\n          filters: #过滤器，请求在传递过程中通过过滤器修改\n            - StripPrefix=1  #去掉第一层前缀，转发给后续的路径\n\n        - id: dcloud-account-service  #用户服务 路由唯一标识\n          uri: lb://dcloud-account-service  #从nocas进行转发\n          order: 4 #优先级，数字越小优先级越高\n          predicates: #断言 配置哪个路径才转发，前端访问路径统一加上XXX-server，网关判断转发对应的服务，如果是回调业务记得修改\n            - Path=/account-server/**\n          filters: #过滤器，请求在传递过程中通过过滤器修改\n            - StripPrefix=1  #去掉第一层前缀，转发给后续的路径\n\n        - id: dcloud-shop-service  #用户服务 路由唯一标识\n          uri: lb://dcloud-shop-service  #从nocas进行转发\n          order: 5 #优先级，数字越小优先级越高\n          predicates: #断言 配置哪个路径才转发，前端访问路径统一加上XXX-server，网关判断转发对应的服务，如果是回调业务记得修改\n            - Path=/shop-server/**\n          filters: #过滤器，请求在传递过程中通过过滤器修改\n            - StripPrefix=1  #去掉第一层前缀，转发给后续的路径\n\n\n      #开启网关拉取nacos的服务\n      discovery:\n        locator:\n          enabled: true\n\n#设置日志级别,ERROR/WARN/INFO/DEBUG,默认是INFO以上才显示\nlogging:\n  level:\n    root: INFO\n    #nacos日志问题\n    com.alibaba.nacos.client.config.impl: WARN\n', 'e9d7db50ea9bec1e40b23362ddf2e827', '2022-04-16 02:08:39', '2022-04-24 05:25:01', 'nacos', '172.31.101.9', '', '', '', '', '', 'yaml', '');
COMMIT;

-- ----------------------------
-- Table structure for config_info_aggr
-- ----------------------------
DROP TABLE IF EXISTS `config_info_aggr`;
CREATE TABLE `config_info_aggr` (
  `id` bigint NOT NULL AUTO_INCREMENT COMMENT 'id',
  `data_id` varchar(255) CHARACTER SET utf8 COLLATE utf8_bin NOT NULL COMMENT 'data_id',
  `group_id` varchar(255) CHARACTER SET utf8 COLLATE utf8_bin NOT NULL COMMENT 'group_id',
  `datum_id` varchar(255) CHARACTER SET utf8 COLLATE utf8_bin NOT NULL COMMENT 'datum_id',
  `content` longtext CHARACTER SET utf8 COLLATE utf8_bin NOT NULL COMMENT '内容',
  `gmt_modified` datetime NOT NULL COMMENT '修改时间',
  `app_name` varchar(128) CHARACTER SET utf8 COLLATE utf8_bin DEFAULT NULL,
  `tenant_id` varchar(128) CHARACTER SET utf8 COLLATE utf8_bin DEFAULT '' COMMENT '租户字段',
  PRIMARY KEY (`id`),
  UNIQUE KEY `uk_configinfoaggr_datagrouptenantdatum` (`data_id`,`group_id`,`tenant_id`,`datum_id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb3 COLLATE=utf8_bin COMMENT='增加租户字段';

-- ----------------------------
-- Records of config_info_aggr
-- ----------------------------
BEGIN;
COMMIT;

-- ----------------------------
-- Table structure for config_info_beta
-- ----------------------------
DROP TABLE IF EXISTS `config_info_beta`;
CREATE TABLE `config_info_beta` (
  `id` bigint NOT NULL AUTO_INCREMENT COMMENT 'id',
  `data_id` varchar(255) CHARACTER SET utf8 COLLATE utf8_bin NOT NULL COMMENT 'data_id',
  `group_id` varchar(128) CHARACTER SET utf8 COLLATE utf8_bin NOT NULL COMMENT 'group_id',
  `app_name` varchar(128) CHARACTER SET utf8 COLLATE utf8_bin DEFAULT NULL COMMENT 'app_name',
  `content` longtext CHARACTER SET utf8 COLLATE utf8_bin NOT NULL COMMENT 'content',
  `beta_ips` varchar(1024) CHARACTER SET utf8 COLLATE utf8_bin DEFAULT NULL COMMENT 'betaIps',
  `md5` varchar(32) CHARACTER SET utf8 COLLATE utf8_bin DEFAULT NULL COMMENT 'md5',
  `gmt_create` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT '创建时间',
  `gmt_modified` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT '修改时间',
  `src_user` text CHARACTER SET utf8 COLLATE utf8_bin COMMENT 'source user',
  `src_ip` varchar(50) CHARACTER SET utf8 COLLATE utf8_bin DEFAULT NULL COMMENT 'source ip',
  `tenant_id` varchar(128) CHARACTER SET utf8 COLLATE utf8_bin DEFAULT '' COMMENT '租户字段',
  PRIMARY KEY (`id`),
  UNIQUE KEY `uk_configinfobeta_datagrouptenant` (`data_id`,`group_id`,`tenant_id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb3 COLLATE=utf8_bin COMMENT='config_info_beta';

-- ----------------------------
-- Records of config_info_beta
-- ----------------------------
BEGIN;
COMMIT;

-- ----------------------------
-- Table structure for config_info_tag
-- ----------------------------
DROP TABLE IF EXISTS `config_info_tag`;
CREATE TABLE `config_info_tag` (
  `id` bigint NOT NULL AUTO_INCREMENT COMMENT 'id',
  `data_id` varchar(255) CHARACTER SET utf8 COLLATE utf8_bin NOT NULL COMMENT 'data_id',
  `group_id` varchar(128) CHARACTER SET utf8 COLLATE utf8_bin NOT NULL COMMENT 'group_id',
  `tenant_id` varchar(128) CHARACTER SET utf8 COLLATE utf8_bin DEFAULT '' COMMENT 'tenant_id',
  `tag_id` varchar(128) CHARACTER SET utf8 COLLATE utf8_bin NOT NULL COMMENT 'tag_id',
  `app_name` varchar(128) CHARACTER SET utf8 COLLATE utf8_bin DEFAULT NULL COMMENT 'app_name',
  `content` longtext CHARACTER SET utf8 COLLATE utf8_bin NOT NULL COMMENT 'content',
  `md5` varchar(32) CHARACTER SET utf8 COLLATE utf8_bin DEFAULT NULL COMMENT 'md5',
  `gmt_create` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT '创建时间',
  `gmt_modified` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT '修改时间',
  `src_user` text CHARACTER SET utf8 COLLATE utf8_bin COMMENT 'source user',
  `src_ip` varchar(50) CHARACTER SET utf8 COLLATE utf8_bin DEFAULT NULL COMMENT 'source ip',
  PRIMARY KEY (`id`),
  UNIQUE KEY `uk_configinfotag_datagrouptenanttag` (`data_id`,`group_id`,`tenant_id`,`tag_id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb3 COLLATE=utf8_bin COMMENT='config_info_tag';

-- ----------------------------
-- Records of config_info_tag
-- ----------------------------
BEGIN;
COMMIT;

-- ----------------------------
-- Table structure for config_tags_relation
-- ----------------------------
DROP TABLE IF EXISTS `config_tags_relation`;
CREATE TABLE `config_tags_relation` (
  `id` bigint NOT NULL COMMENT 'id',
  `tag_name` varchar(128) CHARACTER SET utf8 COLLATE utf8_bin NOT NULL COMMENT 'tag_name',
  `tag_type` varchar(64) CHARACTER SET utf8 COLLATE utf8_bin DEFAULT NULL COMMENT 'tag_type',
  `data_id` varchar(255) CHARACTER SET utf8 COLLATE utf8_bin NOT NULL COMMENT 'data_id',
  `group_id` varchar(128) CHARACTER SET utf8 COLLATE utf8_bin NOT NULL COMMENT 'group_id',
  `tenant_id` varchar(128) CHARACTER SET utf8 COLLATE utf8_bin DEFAULT '' COMMENT 'tenant_id',
  `nid` bigint NOT NULL AUTO_INCREMENT,
  PRIMARY KEY (`nid`),
  UNIQUE KEY `uk_configtagrelation_configidtag` (`id`,`tag_name`,`tag_type`),
  KEY `idx_tenant_id` (`tenant_id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb3 COLLATE=utf8_bin COMMENT='config_tag_relation';

-- ----------------------------
-- Records of config_tags_relation
-- ----------------------------
BEGIN;
COMMIT;

-- ----------------------------
-- Table structure for group_capacity
-- ----------------------------
DROP TABLE IF EXISTS `group_capacity`;
CREATE TABLE `group_capacity` (
  `id` bigint unsigned NOT NULL AUTO_INCREMENT COMMENT '主键ID',
  `group_id` varchar(128) CHARACTER SET utf8 COLLATE utf8_bin NOT NULL DEFAULT '' COMMENT 'Group ID，空字符表示整个集群',
  `quota` int unsigned NOT NULL DEFAULT '0' COMMENT '配额，0表示使用默认值',
  `usage` int unsigned NOT NULL DEFAULT '0' COMMENT '使用量',
  `max_size` int unsigned NOT NULL DEFAULT '0' COMMENT '单个配置大小上限，单位为字节，0表示使用默认值',
  `max_aggr_count` int unsigned NOT NULL DEFAULT '0' COMMENT '聚合子配置最大个数，，0表示使用默认值',
  `max_aggr_size` int unsigned NOT NULL DEFAULT '0' COMMENT '单个聚合数据的子配置大小上限，单位为字节，0表示使用默认值',
  `max_history_count` int unsigned NOT NULL DEFAULT '0' COMMENT '最大变更历史数量',
  `gmt_create` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT '创建时间',
  `gmt_modified` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT '修改时间',
  PRIMARY KEY (`id`),
  UNIQUE KEY `uk_group_id` (`group_id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb3 COLLATE=utf8_bin COMMENT='集群、各Group容量信息表';

-- ----------------------------
-- Records of group_capacity
-- ----------------------------
BEGIN;
COMMIT;

-- ----------------------------
-- Table structure for his_config_info
-- ----------------------------
DROP TABLE IF EXISTS `his_config_info`;
CREATE TABLE `his_config_info` (
  `id` bigint unsigned NOT NULL,
  `nid` bigint unsigned NOT NULL AUTO_INCREMENT,
  `data_id` varchar(255) CHARACTER SET utf8 COLLATE utf8_bin NOT NULL,
  `group_id` varchar(128) CHARACTER SET utf8 COLLATE utf8_bin NOT NULL,
  `app_name` varchar(128) CHARACTER SET utf8 COLLATE utf8_bin DEFAULT NULL COMMENT 'app_name',
  `content` longtext CHARACTER SET utf8 COLLATE utf8_bin NOT NULL,
  `md5` varchar(32) CHARACTER SET utf8 COLLATE utf8_bin DEFAULT NULL,
  `gmt_create` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `gmt_modified` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `src_user` text CHARACTER SET utf8 COLLATE utf8_bin,
  `src_ip` varchar(50) CHARACTER SET utf8 COLLATE utf8_bin DEFAULT NULL,
  `op_type` char(10) CHARACTER SET utf8 COLLATE utf8_bin DEFAULT NULL,
  `tenant_id` varchar(128) CHARACTER SET utf8 COLLATE utf8_bin DEFAULT '' COMMENT '租户字段',
  PRIMARY KEY (`nid`),
  KEY `idx_gmt_create` (`gmt_create`),
  KEY `idx_gmt_modified` (`gmt_modified`),
  KEY `idx_did` (`data_id`)
) ENGINE=InnoDB AUTO_INCREMENT=31 DEFAULT CHARSET=utf8mb3 COLLATE=utf8_bin COMMENT='多租户改造';

-- ----------------------------
-- Records of his_config_info
-- ----------------------------
BEGIN;
INSERT INTO `his_config_info` VALUES (1, 8, 'test', 'DEFAULT_GROUP', '', '11', '6512bd43d9caa6e02c990b0a82652dca', '2022-03-28 00:09:27', '2022-03-27 11:09:28', NULL, '119.123.101.142', 'D', '');
INSERT INTO `his_config_info` VALUES (2, 9, 'test.json', 'DEFAULT_GROUP', '', '11', '6512bd43d9caa6e02c990b0a82652dca', '2022-03-28 00:09:27', '2022-03-27 11:09:28', NULL, '119.123.101.142', 'D', '');
INSERT INTO `his_config_info` VALUES (5, 10, 'xdclass-case-service-dev.yaml', 'DEFAULT_GROUP', '', 'server:\r\n  port: 9006\r\n\r\nspring:\r\n  application:\r\n    name: xdclass-case-service\r\n  cloud:\r\n      #注册中心地址\r\n    nacos:\r\n      discovery:\r\n        server-addr: http://120.77.65.206:8848\r\n  #数据库配置\r\n  datasource:\r\n    driver-class-name: com.mysql.cj.jdbc.Driver\r\n    url: jdbc:mysql://120.77.65.206:3306/xdclass-case-service?useUnicode=true&characterEncoding=utf-8&useSSL=false&serverTimezone=Asia/Shanghai\r\n    username: root\r\n    password: 123456\r\n  redis:\r\n    host: 120.77.65.206\r\n    port: 3306\r\n    password: 123456\r\n\r\n#配置plus打印sql日志\r\nmybatis-plus:\r\n  configuration:\r\n    log-impl: org.apache.ibatis.logging.stdout.StdOutImpl\r\n\r\n\r\n#设置日志级别,ERROR/WARN/INFO/DEBUG,默认是INFO以上才显示\r\nlogging:\r\n  level:\r\n    root: INFO', 'af6f5482037b76c5abad7592abfded57', '2022-03-28 00:09:27', '2022-03-27 11:09:28', NULL, '119.123.101.142', 'D', '');
INSERT INTO `his_config_info` VALUES (0, 11, 'dcloud-account-service-dev.properties', 'DEFAULT_GROUP', '', 'server.port=8001\nspring.application.name=dcloud-account-service\n\n#----------服务注册和发现--------------\nspring.cloud.nacos.discovery.server-addr=120.24.7.58:8848\nspring.cloud.nacos.discovery.username=read_only\nspring.cloud.nacos.discovery.password=xdclass.net168\n\n\n#用于rpc调用token验证\nrpc.token=xdclass.net168\n\n#-------redis连接配置-------\nspring.redis.client-type=jedis\nspring.redis.host=120.79.150.146\nspring.redis.password=xdclass.net\nspring.redis.port=6379\nspring.redis.jedis.pool.max-active=100\nspring.redis.jedis.pool.max-idle=100\nspring.redis.jedis.pool.min-idle=100\nspring.redis.jedis.pool.max-wait=60000\n\n#-------分库分表数据源配置-------\nspring.shardingsphere.datasource.names=ds0\nspring.shardingsphere.datasource.ds0.connectionTimeoutMilliseconds=30000\nspring.shardingsphere.datasource.ds0.driver-class-name=com.mysql.cj.jdbc.Driver\nspring.shardingsphere.datasource.ds0.idleTimeoutMilliseconds=60000\nspring.shardingsphere.datasource.ds0.jdbc-url=jdbc:mysql://120.79.150.146:3306/dcloud_account?useUnicode=true&characterEncoding=utf-8&useSSL=false&serverTimezone=Asia/Shanghai&allowPublicKeyRetrieval=true\nspring.shardingsphere.datasource.ds0.maintenanceIntervalMilliseconds=30000\nspring.shardingsphere.datasource.ds0.maxLifetimeMilliseconds=1800000\nspring.shardingsphere.datasource.ds0.maxPoolSize=50\nspring.shardingsphere.datasource.ds0.minPoolSize=50\nspring.shardingsphere.datasource.ds0.password=xdclass.net168\nspring.shardingsphere.datasource.ds0.type=com.zaxxer.hikari.HikariDataSource\nspring.shardingsphere.datasource.ds0.username=root\nspring.shardingsphere.props.sql.show=true\n\n# 指定traffic表的数据分布情况，配置数据节点,行表达式标识符使用 ${...} 或 $->{...}，但前者与 Spring 本身的文件占位符冲突，所以在 Spring 环境中建议使用 $->{...}\nspring.shardingsphere.sharding.tables.traffic.actual-data-nodes=ds0.traffic_$->{0..1}\n#水平分表策略+行表达式分片\nspring.shardingsphere.sharding.tables.traffic.table-strategy.inline.algorithm-expression=traffic_$->{ account_no % 2 }\nspring.shardingsphere.sharding.tables.traffic.table-strategy.inline.sharding-column=account_no\n\n#id生成策略\nspring.shardingsphere.sharding.tables.traffic.key-generator.column=id\nspring.shardingsphere.sharding.tables.traffic.key-generator.props.worker.id=${workId}\nspring.shardingsphere.sharding.tables.traffic.key-generator.type=SNOWFLAKE\n\n#----------sms短信配置--------------\nsms.app-code=6999d4df3e7d48028470bbe517169a8d\nsms.template-id=M72CB42894\n\n#----------阿里云OSS配置--------------\naliyun.oss.endpoint=oss-cn-guangzhou.aliyuncs.com\naliyun.oss.access-key-id=LTAI5tHVGvYw7twoVFyruB1H\naliyun.oss.access-key-secret=r4d0EudzSvPfVMb9Zp0TfmsE32RXmN\naliyun.oss.bucketname=dcloud-link\n\n\n\n\n##----------rabbit配置--------------\nspring.rabbitmq.host=120.79.150.146\nspring.rabbitmq.port=5672\n#需要手工创建虚拟主机\nspring.rabbitmq.virtual-host=dev\nspring.rabbitmq.username=admin\nspring.rabbitmq.password=password\n#消息确认方式，manual(手动ack) 和auto(自动ack); 消息消费重试到达指定次数进到异常交换机和异常队列，需要改为自动ack确认消息\nspring.rabbitmq.listener.simple.acknowledge-mode=auto\n\n\n#开启重试，消费者代码不能添加try catch捕获不往外抛异常\nspring.rabbitmq.listener.simple.retry.enabled=true\n#最大重试次数\nspring.rabbitmq.listener.simple.retry.max-attempts=4\n# 重试消息的时间间隔，5秒\nspring.rabbitmq.listener.simple.retry.initial-interval=5000\n\n\n\n\n#----------xxl-job配置--------------\nlogging.config=classpath:logback.xml\n#调度中心部署地址,多个配置逗号分隔 \"http://address01,http://address02\"\nxxl.job.admin.addresses=http://112.74.107.230:8080/xxl-job-admin\n\n#执行器token，非空时启用 xxl-job, access token\nxxl.job.accessToken=xdclass.net\n\n# 执行器app名称,和控制台那边配置一样的名称，不然注册不上去\nxxl.job.executor.appname=traffic-app-executor\n\n# [选填]执行器注册：优先使用该配置作为注册地址，为空时使用内嵌服务 ”IP:PORT“ 作为注册地址。\n#从而更灵活的支持容器类型执行器动态IP和动态映射端口问题。\nxxl.job.executor.address=\n\n#[选填]执行器IP ：默认为空表示自动获取IP（即springboot容器的ip和端口，可以自动获取，也可以指定），多网卡时可手动设置指定IP，该IP不会绑定Host仅作为通讯实用；地址信息用于 \"执行器注册\" 和 \"调度中心请求并触发任务\"，\nxxl.job.executor.ip=\n\n# [选填]执行器端口号：小于等于0则自动获取；默认端口为9999，单机部署多个执行器时，注意要配置不同执行器端口；\nxxl.job.executor.port=9999\n\n#执行器日志文件存储路径，需要对该路径拥有读写权限；为空则使用默认路径\nxxl.job.executor.logpath=./data/logs/xxl-job/executor\n\n#执行器日志保存天数\nxxl.job.executor.logretentiondays=30', 'dc602a26d374901b1ea9e383bce744f3', '2022-04-15 13:52:19', '2022-04-15 00:52:19', 'nacos', '172.31.101.9', 'I', '');
INSERT INTO `his_config_info` VALUES (6, 12, 'dcloud-account-service-dev.properties', 'DEFAULT_GROUP', '', 'server.port=8001\nspring.application.name=dcloud-account-service\n\n#----------服务注册和发现--------------\nspring.cloud.nacos.discovery.server-addr=120.24.7.58:8848\nspring.cloud.nacos.discovery.username=read_only\nspring.cloud.nacos.discovery.password=xdclass.net168\n\n\n#用于rpc调用token验证\nrpc.token=xdclass.net168\n\n#-------redis连接配置-------\nspring.redis.client-type=jedis\nspring.redis.host=120.79.150.146\nspring.redis.password=xdclass.net\nspring.redis.port=6379\nspring.redis.jedis.pool.max-active=100\nspring.redis.jedis.pool.max-idle=100\nspring.redis.jedis.pool.min-idle=100\nspring.redis.jedis.pool.max-wait=60000\n\n#-------分库分表数据源配置-------\nspring.shardingsphere.datasource.names=ds0\nspring.shardingsphere.datasource.ds0.connectionTimeoutMilliseconds=30000\nspring.shardingsphere.datasource.ds0.driver-class-name=com.mysql.cj.jdbc.Driver\nspring.shardingsphere.datasource.ds0.idleTimeoutMilliseconds=60000\nspring.shardingsphere.datasource.ds0.jdbc-url=jdbc:mysql://120.79.150.146:3306/dcloud_account?useUnicode=true&characterEncoding=utf-8&useSSL=false&serverTimezone=Asia/Shanghai&allowPublicKeyRetrieval=true\nspring.shardingsphere.datasource.ds0.maintenanceIntervalMilliseconds=30000\nspring.shardingsphere.datasource.ds0.maxLifetimeMilliseconds=1800000\nspring.shardingsphere.datasource.ds0.maxPoolSize=50\nspring.shardingsphere.datasource.ds0.minPoolSize=50\nspring.shardingsphere.datasource.ds0.password=xdclass.net168\nspring.shardingsphere.datasource.ds0.type=com.zaxxer.hikari.HikariDataSource\nspring.shardingsphere.datasource.ds0.username=root\nspring.shardingsphere.props.sql.show=true\n\n# 指定traffic表的数据分布情况，配置数据节点,行表达式标识符使用 ${...} 或 $->{...}，但前者与 Spring 本身的文件占位符冲突，所以在 Spring 环境中建议使用 $->{...}\nspring.shardingsphere.sharding.tables.traffic.actual-data-nodes=ds0.traffic_$->{0..1}\n#水平分表策略+行表达式分片\nspring.shardingsphere.sharding.tables.traffic.table-strategy.inline.algorithm-expression=traffic_$->{ account_no % 2 }\nspring.shardingsphere.sharding.tables.traffic.table-strategy.inline.sharding-column=account_no\n\n#id生成策略\nspring.shardingsphere.sharding.tables.traffic.key-generator.column=id\nspring.shardingsphere.sharding.tables.traffic.key-generator.props.worker.id=${workId}\nspring.shardingsphere.sharding.tables.traffic.key-generator.type=SNOWFLAKE\n\n#----------sms短信配置--------------\nsms.app-code=6999d4df3e7d48028470bbe517169a8d\nsms.template-id=M72CB42894\n\n#----------阿里云OSS配置--------------\naliyun.oss.endpoint=oss-cn-guangzhou.aliyuncs.com\naliyun.oss.access-key-id=LTAI5tHVGvYw7twoVFyruB1H\naliyun.oss.access-key-secret=r4d0EudzSvPfVMb9Zp0TfmsE32RXmN\naliyun.oss.bucketname=dcloud-link\n\n\n\n\n##----------rabbit配置--------------\nspring.rabbitmq.host=120.79.150.146\nspring.rabbitmq.port=5672\n#需要手工创建虚拟主机\nspring.rabbitmq.virtual-host=dev\nspring.rabbitmq.username=admin\nspring.rabbitmq.password=password\n#消息确认方式，manual(手动ack) 和auto(自动ack); 消息消费重试到达指定次数进到异常交换机和异常队列，需要改为自动ack确认消息\nspring.rabbitmq.listener.simple.acknowledge-mode=auto\n\n\n#开启重试，消费者代码不能添加try catch捕获不往外抛异常\nspring.rabbitmq.listener.simple.retry.enabled=true\n#最大重试次数\nspring.rabbitmq.listener.simple.retry.max-attempts=4\n# 重试消息的时间间隔，5秒\nspring.rabbitmq.listener.simple.retry.initial-interval=5000\n\n\n\n\n#----------xxl-job配置--------------\nlogging.config=classpath:logback.xml\n#调度中心部署地址,多个配置逗号分隔 \"http://address01,http://address02\"\nxxl.job.admin.addresses=http://112.74.107.230:8080/xxl-job-admin\n\n#执行器token，非空时启用 xxl-job, access token\nxxl.job.accessToken=xdclass.net\n\n# 执行器app名称,和控制台那边配置一样的名称，不然注册不上去\nxxl.job.executor.appname=traffic-app-executor\n\n# [选填]执行器注册：优先使用该配置作为注册地址，为空时使用内嵌服务 ”IP:PORT“ 作为注册地址。\n#从而更灵活的支持容器类型执行器动态IP和动态映射端口问题。\nxxl.job.executor.address=\n\n#[选填]执行器IP ：默认为空表示自动获取IP（即springboot容器的ip和端口，可以自动获取，也可以指定），多网卡时可手动设置指定IP，该IP不会绑定Host仅作为通讯实用；地址信息用于 \"执行器注册\" 和 \"调度中心请求并触发任务\"，\nxxl.job.executor.ip=\n\n# [选填]执行器端口号：小于等于0则自动获取；默认端口为9999，单机部署多个执行器时，注意要配置不同执行器端口；\nxxl.job.executor.port=9999\n\n#执行器日志文件存储路径，需要对该路径拥有读写权限；为空则使用默认路径\nxxl.job.executor.logpath=./data/logs/xxl-job/executor\n\n#执行器日志保存天数\nxxl.job.executor.logretentiondays=30', 'dc602a26d374901b1ea9e383bce744f3', '2022-04-15 14:02:39', '2022-04-15 01:02:39', 'nacos', '172.31.101.9', 'U', '');
INSERT INTO `his_config_info` VALUES (6, 13, 'dcloud-account-service-dev.properties', 'DEFAULT_GROUP', '', 'server.port=8001\nspring.application.name=dcloud-account-service\n#----------服务注册和发现--------------\nspring.cloud.nacos.discovery.server-addr=120.24.7.58:8848\nspring.cloud.nacos.discovery.username=nacos\nspring.cloud.nacos.discovery.password=nacos\n#用于rpc调用token验证\nrpc.token=xdclass.net168\n#-------redis连接配置-------\nspring.redis.client-type=jedis\nspring.redis.host=120.79.150.146\nspring.redis.password=xdclass.net\nspring.redis.port=6379\nspring.redis.jedis.pool.max-active=100\nspring.redis.jedis.pool.max-idle=100\nspring.redis.jedis.pool.min-idle=100\nspring.redis.jedis.pool.max-wait=60000\n#-------分库分表数据源配置-------\nspring.shardingsphere.datasource.names=ds0\nspring.shardingsphere.datasource.ds0.connectionTimeoutMilliseconds=30000\nspring.shardingsphere.datasource.ds0.driver-class-name=com.mysql.cj.jdbc.Driver\nspring.shardingsphere.datasource.ds0.idleTimeoutMilliseconds=60000\nspring.shardingsphere.datasource.ds0.jdbc-url=jdbc:mysql://120.79.150.146:3306/dcloud_account?useUnicode=true&characterEncoding=utf-8&useSSL=false&serverTimezone=Asia/Shanghai&allowPublicKeyRetrieval=true\nspring.shardingsphere.datasource.ds0.maintenanceIntervalMilliseconds=30000\nspring.shardingsphere.datasource.ds0.maxLifetimeMilliseconds=1800000\nspring.shardingsphere.datasource.ds0.maxPoolSize=50\nspring.shardingsphere.datasource.ds0.minPoolSize=50\nspring.shardingsphere.datasource.ds0.password=xdclass.net168\nspring.shardingsphere.datasource.ds0.type=com.zaxxer.hikari.HikariDataSource\nspring.shardingsphere.datasource.ds0.username=root\nspring.shardingsphere.props.sql.show=true\n# 指定traffic表的数据分布情况，配置数据节点,行表达式标识符使用 ${...} 或 $->{...}，但前者与 Spring 本身的文件占位符冲突，所以在 Spring 环境中建议使用 $->{...}\nspring.shardingsphere.sharding.tables.traffic.actual-data-nodes=ds0.traffic_$->{0..1}\n#水平分表策略+行表达式分片\nspring.shardingsphere.sharding.tables.traffic.table-strategy.inline.algorithm-expression=traffic_$->{ account_no % 2 }\nspring.shardingsphere.sharding.tables.traffic.table-strategy.inline.sharding-column=account_no\n\n#id生成策略\nspring.shardingsphere.sharding.tables.traffic.key-generator.column=id\nspring.shardingsphere.sharding.tables.traffic.key-generator.props.worker.id=${workId}\nspring.shardingsphere.sharding.tables.traffic.key-generator.type=SNOWFLAKE\n\n#----------sms短信配置--------------\nsms.app-code=6999d4df3e7d48028470bbe517169a8d\nsms.template-id=M72CB42894\n\n#----------阿里云OSS配置--------------\naliyun.oss.endpoint=oss-cn-guangzhou.aliyuncs.com\naliyun.oss.access-key-id=LTAI5tHVGvYw7twoVFyruB1H\naliyun.oss.access-key-secret=r4d0EudzSvPfVMb9Zp0TfmsE32RXmN\naliyun.oss.bucketname=dcloud-link\n\n\n\n\n##----------rabbit配置--------------\nspring.rabbitmq.host=120.79.150.146\nspring.rabbitmq.port=5672\n#需要手工创建虚拟主机\nspring.rabbitmq.virtual-host=dev\nspring.rabbitmq.username=admin\nspring.rabbitmq.password=password\n#消息确认方式，manual(手动ack) 和auto(自动ack); 消息消费重试到达指定次数进到异常交换机和异常队列，需要改为自动ack确认消息\nspring.rabbitmq.listener.simple.acknowledge-mode=auto\n\n\n#开启重试，消费者代码不能添加try catch捕获不往外抛异常\nspring.rabbitmq.listener.simple.retry.enabled=true\n#最大重试次数\nspring.rabbitmq.listener.simple.retry.max-attempts=4\n# 重试消息的时间间隔，5秒\nspring.rabbitmq.listener.simple.retry.initial-interval=5000\n\n\n\n\n#----------xxl-job配置--------------\nlogging.config=classpath:logback.xml\n#调度中心部署地址,多个配置逗号分隔 \"http://address01,http://address02\"\nxxl.job.admin.addresses=http://112.74.107.230:8080/xxl-job-admin\n\n#执行器token，非空时启用 xxl-job, access token\nxxl.job.accessToken=xdclass.net\n\n# 执行器app名称,和控制台那边配置一样的名称，不然注册不上去\nxxl.job.executor.appname=traffic-app-executor\n\n# [选填]执行器注册：优先使用该配置作为注册地址，为空时使用内嵌服务 ”IP:PORT“ 作为注册地址。\n#从而更灵活的支持容器类型执行器动态IP和动态映射端口问题。\nxxl.job.executor.address=\n\n#[选填]执行器IP ：默认为空表示自动获取IP（即springboot容器的ip和端口，可以自动获取，也可以指定），多网卡时可手动设置指定IP，该IP不会绑定Host仅作为通讯实用；地址信息用于 \"执行器注册\" 和 \"调度中心请求并触发任务\"，\nxxl.job.executor.ip=\n\n# [选填]执行器端口号：小于等于0则自动获取；默认端口为9999，单机部署多个执行器时，注意要配置不同执行器端口；\nxxl.job.executor.port=9999\n\n#执行器日志文件存储路径，需要对该路径拥有读写权限；为空则使用默认路径\nxxl.job.executor.logpath=./data/logs/xxl-job/executor\n\n#执行器日志保存天数\nxxl.job.executor.logretentiondays=30', '140e592de02d7a17ddcf058d854de2cd', '2022-04-15 14:04:49', '2022-04-15 01:04:50', 'nacos', '172.31.101.9', 'U', '');
INSERT INTO `his_config_info` VALUES (6, 14, 'dcloud-account-service-dev.properties', 'DEFAULT_GROUP', '', 'server.port=8001\nspring.application.name=dcloud-account-service\n#----------服务注册和发现--------------\nspring.cloud.nacos.discovery.server-addr=120.24.7.58:8848\nspring.cloud.nacos.discovery.username=nacos\nspring.cloud.nacos.discovery.password=nacos\n#用于rpc调用token验证\nrpc.token=xdclass.net168\n#-------redis连接配置-------\nspring.redis.client-type=jedis\nspring.redis.host=120.79.150.146\nspring.redis.password=xdclass.net\nspring.redis.port=6379\nspring.redis.jedis.pool.max-active=100\nspring.redis.jedis.pool.max-idle=100\nspring.redis.jedis.pool.min-idle=100\nspring.redis.jedis.pool.max-wait=60000\n#-------分库分表数据源配置-------\nspring.shardingsphere.datasource.names=ds0\nspring.shardingsphere.datasource.ds0.connectionTimeoutMilliseconds=30000\nspring.shardingsphere.datasource.ds0.driver-class-name=com.mysql.cj.jdbc.Driver\nspring.shardingsphere.datasource.ds0.idleTimeoutMilliseconds=60000\nspring.shardingsphere.datasource.ds0.jdbc-url=jdbc:mysql://120.79.150.146:3306/dcloud_account?useUnicode=true&characterEncoding=utf-8&useSSL=false&serverTimezone=Asia/Shanghai&allowPublicKeyRetrieval=true\nspring.shardingsphere.datasource.ds0.maintenanceIntervalMilliseconds=30000\nspring.shardingsphere.datasource.ds0.maxLifetimeMilliseconds=1800000\nspring.shardingsphere.datasource.ds0.maxPoolSize=50\nspring.shardingsphere.datasource.ds0.minPoolSize=50\nspring.shardingsphere.datasource.ds0.password=xdclass.net168\nspring.shardingsphere.datasource.ds0.type=com.zaxxer.hikari.HikariDataSource\nspring.shardingsphere.datasource.ds0.username=root\nspring.shardingsphere.props.sql.show=true\n# 指定traffic表的数据分布情况，配置数据节点,行表达式标识符使用 ${...} 或 $->{...}，但前者与 Spring 本身的文件占位符冲突，所以在 Spring 环境中建议使用 $->{...}\nspring.shardingsphere.sharding.tables.traffic.actual-data-nodes=ds0.traffic_$->{0..1}\n#水平分表策略+行表达式分片\nspring.shardingsphere.sharding.tables.traffic.table-strategy.inline.algorithm-expression=traffic_$->{ account_no % 2 }\nspring.shardingsphere.sharding.tables.traffic.table-strategy.inline.sharding-column=account_no\n#id生成策略\nspring.shardingsphere.sharding.tables.traffic.key-generator.column=id\nspring.shardingsphere.sharding.tables.traffic.key-generator.props.worker.id=${workId}\nspring.shardingsphere.sharding.tables.traffic.key-generator.type=SNOWFLAKE\n\n#----------sms短信配置--------------\nsms.app-code=6999d4df3e7d48028470bbe517169a8d\nsms.template-id=M72CB42894\n\n#----------阿里云OSS配置--------------\naliyun.oss.endpoint=oss-cn-guangzhou.aliyuncs.com\naliyun.oss.access-key-id=LTAI5tHVGvYw7twoVFyruB1H\naliyun.oss.access-key-secret=r4d0EudzSvPfVMb9Zp0TfmsE32RXmN\naliyun.oss.bucketname=dcloud-link\n\n\n\n\n##----------rabbit配置--------------\nspring.rabbitmq.host=120.79.150.146\nspring.rabbitmq.port=5672\n#需要手工创建虚拟主机\nspring.rabbitmq.virtual-host=dev\nspring.rabbitmq.username=admin\nspring.rabbitmq.password=password\n#消息确认方式，manual(手动ack) 和auto(自动ack); 消息消费重试到达指定次数进到异常交换机和异常队列，需要改为自动ack确认消息\nspring.rabbitmq.listener.simple.acknowledge-mode=auto\n\n\n#开启重试，消费者代码不能添加try catch捕获不往外抛异常\nspring.rabbitmq.listener.simple.retry.enabled=true\n#最大重试次数\nspring.rabbitmq.listener.simple.retry.max-attempts=4\n# 重试消息的时间间隔，5秒\nspring.rabbitmq.listener.simple.retry.initial-interval=5000\n\n\n\n\n#----------xxl-job配置--------------\nlogging.config=classpath:logback.xml\n#调度中心部署地址,多个配置逗号分隔 \"http://address01,http://address02\"\nxxl.job.admin.addresses=http://112.74.107.230:8080/xxl-job-admin\n\n#执行器token，非空时启用 xxl-job, access token\nxxl.job.accessToken=xdclass.net\n\n# 执行器app名称,和控制台那边配置一样的名称，不然注册不上去\nxxl.job.executor.appname=traffic-app-executor\n\n# [选填]执行器注册：优先使用该配置作为注册地址，为空时使用内嵌服务 ”IP:PORT“ 作为注册地址。\n#从而更灵活的支持容器类型执行器动态IP和动态映射端口问题。\nxxl.job.executor.address=\n\n#[选填]执行器IP ：默认为空表示自动获取IP（即springboot容器的ip和端口，可以自动获取，也可以指定），多网卡时可手动设置指定IP，该IP不会绑定Host仅作为通讯实用；地址信息用于 \"执行器注册\" 和 \"调度中心请求并触发任务\"，\nxxl.job.executor.ip=\n\n# [选填]执行器端口号：小于等于0则自动获取；默认端口为9999，单机部署多个执行器时，注意要配置不同执行器端口；\nxxl.job.executor.port=9999\n\n#执行器日志文件存储路径，需要对该路径拥有读写权限；为空则使用默认路径\nxxl.job.executor.logpath=./data/logs/xxl-job/executor\n\n#执行器日志保存天数\nxxl.job.executor.logretentiondays=30', 'fc228cdc5bf1ed8f722b60fa5740cbed', '2022-04-15 14:11:08', '2022-04-15 01:11:09', 'nacos', '172.31.101.9', 'U', '');
INSERT INTO `his_config_info` VALUES (6, 15, 'dcloud-account-service-dev.properties', 'DEFAULT_GROUP', '', 'server.port=8001\nspring.application.name=dcloud-account-service\n#----------服务注册和发现--------------\nspring.cloud.nacos.discovery.server-addr=120.24.7.58:8848\nspring.cloud.nacos.discovery.username=nacos\nspring.cloud.nacos.discovery.password=nacos\n#用于rpc调用token验证\nrpc.token=xdclass.net168\n#-------redis连接配置-------\nspring.redis.client-type=jedis\nspring.redis.host=120.79.150.146\nspring.redis.password=xdclass.net\nspring.redis.port=6379\nspring.redis.jedis.pool.max-active=100\nspring.redis.jedis.pool.max-idle=100\nspring.redis.jedis.pool.min-idle=100\nspring.redis.jedis.pool.max-wait=60000\n#-------分库分表数据源配置-------\nspring.shardingsphere.datasource.names=ds0\nspring.shardingsphere.datasource.ds0.connectionTimeoutMilliseconds=30000\nspring.shardingsphere.datasource.ds0.driver-class-name=com.mysql.cj.jdbc.Driver\nspring.shardingsphere.datasource.ds0.idleTimeoutMilliseconds=60000\nspring.shardingsphere.datasource.ds0.jdbc-url=jdbc:mysql://120.79.150.146:3306/dcloud_account?useUnicode=true&characterEncoding=utf-8&useSSL=false&serverTimezone=Asia/Shanghai&allowPublicKeyRetrieval=true\nspring.shardingsphere.datasource.ds0.maintenanceIntervalMilliseconds=30000\nspring.shardingsphere.datasource.ds0.maxLifetimeMilliseconds=1800000\nspring.shardingsphere.datasource.ds0.maxPoolSize=50\nspring.shardingsphere.datasource.ds0.minPoolSize=50\nspring.shardingsphere.datasource.ds0.password=xdclass.net168\nspring.shardingsphere.datasource.ds0.type=com.zaxxer.hikari.HikariDataSource\nspring.shardingsphere.datasource.ds0.username=root\nspring.shardingsphere.props.sql.show=true\n# 指定traffic表的数据分布情况，配置数据节点,行表达式标识符使用 ${...} 或 $->{...}，但前者与 Spring 本身的文件占位符冲突，所以在 Spring 环境中建议使用 $->{...}\nspring.shardingsphere.sharding.tables.traffic.actual-data-nodes=ds0.traffic_$->{0..1}\n#水平分表策略+行表达式分片\nspring.shardingsphere.sharding.tables.traffic.table-strategy.inline.algorithm-expression=traffic_$->{ account_no % 2 }\nspring.shardingsphere.sharding.tables.traffic.table-strategy.inline.sharding-column=account_no\n#id生成策略\nspring.shardingsphere.sharding.tables.traffic.key-generator.column=id\nspring.shardingsphere.sharding.tables.traffic.key-generator.props.worker.id=${workId}\nspring.shardingsphere.sharding.tables.traffic.key-generator.type=SNOWFLAKE\n\n#----------sms短信配置--------------\nsms.app-code=6999d4df3e7d48028470bbe517169a8d\nsms.template-id=M72CB42894\n\n#----------阿里云OSS配置--------------\naliyun.oss.endpoint=oss-cn-guangzhou.aliyuncs.com\naliyun.oss.access-key-id=LTAI5tHVGvYw7twoVFyruB1H\naliyun.oss.access-key-secret=r4d0EudzSvPfVMb9Zp0TfmsE32RXmN\naliyun.oss.bucketname=dcloud-link\n\n\n\n\n##----------rabbit配置--------------\nspring.rabbitmq.host=120.79.150.146\nspring.rabbitmq.port=5672\n#需要手工创建虚拟主机\nspring.rabbitmq.virtual-host=dev\nspring.rabbitmq.username=admin\nspring.rabbitmq.password=password\n#消息确认方式，manual(手动ack) 和auto(自动ack); 消息消费重试到达指定次数进到异常交换机和异常队列，需要改为自动ack确认消息\nspring.rabbitmq.listener.simple.acknowledge-mode=auto\n\n\n#开启重试，消费者代码不能添加try catch捕获不往外抛异常\nspring.rabbitmq.listener.simple.retry.enabled=true\n#最大重试次数\nspring.rabbitmq.listener.simple.retry.max-attempts=4\n# 重试消息的时间间隔，5秒\nspring.rabbitmq.listener.simple.retry.initial-interval=5000\n\n\n\n\n#----------xxl-job配置--------------\nlogging.config=classpath:logback.xml\n#调度中心部署地址,多个配置逗号分隔 \"http://address01,http://address02\"\nxxl.job.admin.addresses=http://112.74.107.230:8080/xxl-job-admin\n\n#执行器token，非空时启用 xxl-job, access token\nxxl.job.accessToken=xdclass.net\n\n# 执行器app名称,和控制台那边配置一样的名称，不然注册不上去\nxxl.job.executor.appname=traffic-app-executor\n\n# [选填]执行器注册：优先使用该配置作为注册地址，为空时使用内嵌服务 ”IP:PORT“ 作为注册地址。\n#从而更灵活的支持容器类型执行器动态IP和动态映射端口问题。\nxxl.job.executor.address=\n\n#[选填]执行器IP ：默认为空表示自动获取IP（即springboot容器的ip和端口，可以自动获取，也可以指定），多网卡时可手动设置指定IP，该IP不会绑定Host仅作为通讯实用；地址信息用于 \"执行器注册\" 和 \"调度中心请求并触发任务\"，\nxxl.job.executor.ip=\n\n# [选填]执行器端口号：小于等于0则自动获取；默认端口为9999，单机部署多个执行器时，注意要配置不同执行器端口；\nxxl.job.executor.port=9999\n\n#执行器日志文件存储路径，需要对该路径拥有读写权限；为空则使用默认路径\nxxl.job.executor.logpath=./data/logs/xxl-job/executor\n\n#执行器日志保存天数\nxxl.job.executor.logretentiondays=30\n\n\nlogging.level.root=INFO', 'a1eee7601b6aad7fba7e143b5855c18c', '2022-04-15 14:14:18', '2022-04-15 01:14:18', 'nacos', '172.31.101.9', 'U', '');
INSERT INTO `his_config_info` VALUES (6, 16, 'dcloud-account-service-dev.properties', 'DEFAULT_GROUP', '', 'server.port=8001\nspring.application.name=dcloud-account-service\n#----------服务注册和发现--------------\nspring.cloud.nacos.discovery.server-addr=120.24.7.58:8848\nspring.cloud.nacos.discovery.username=nacos\nspring.cloud.nacos.discovery.password=nacos\n#用于rpc调用token验证\nrpc.token=xdclass.net168\n#-------redis连接配置-------\nspring.redis.client-type=jedis\nspring.redis.host=120.79.150.146\nspring.redis.password=xdclass.net\nspring.redis.port=6379\nspring.redis.jedis.pool.max-active=100\nspring.redis.jedis.pool.max-idle=100\nspring.redis.jedis.pool.min-idle=100\nspring.redis.jedis.pool.max-wait=60000\n#-------分库分表数据源配置-------\nspring.shardingsphere.datasource.names=ds0\nspring.shardingsphere.datasource.ds0.connectionTimeoutMilliseconds=30000\nspring.shardingsphere.datasource.ds0.driver-class-name=com.mysql.cj.jdbc.Driver\nspring.shardingsphere.datasource.ds0.idleTimeoutMilliseconds=60000\nspring.shardingsphere.datasource.ds0.jdbc-url=jdbc:mysql://120.79.150.146:3306/dcloud_account?useUnicode=true&characterEncoding=utf-8&useSSL=false&serverTimezone=Asia/Shanghai&allowPublicKeyRetrieval=true\nspring.shardingsphere.datasource.ds0.maintenanceIntervalMilliseconds=30000\nspring.shardingsphere.datasource.ds0.maxLifetimeMilliseconds=1800000\nspring.shardingsphere.datasource.ds0.maxPoolSize=50\nspring.shardingsphere.datasource.ds0.minPoolSize=50\nspring.shardingsphere.datasource.ds0.password=xdclass.net168\nspring.shardingsphere.datasource.ds0.type=com.zaxxer.hikari.HikariDataSource\nspring.shardingsphere.datasource.ds0.username=root\nspring.shardingsphere.props.sql.show=true\n# 指定traffic表的数据分布情况，配置数据节点,行表达式标识符使用 ${...} 或 $->{...}，但前者与 Spring 本身的文件占位符冲突，所以在 Spring 环境中建议使用 $->{...}\nspring.shardingsphere.sharding.tables.traffic.actual-data-nodes=ds0.traffic_$->{0..1}\n#水平分表策略+行表达式分片\nspring.shardingsphere.sharding.tables.traffic.table-strategy.inline.algorithm-expression=traffic_$->{ account_no % 2 }\nspring.shardingsphere.sharding.tables.traffic.table-strategy.inline.sharding-column=account_no\n#id生成策略\nspring.shardingsphere.sharding.tables.traffic.key-generator.column=id\nspring.shardingsphere.sharding.tables.traffic.key-generator.props.worker.id=${workId}\nspring.shardingsphere.sharding.tables.traffic.key-generator.type=SNOWFLAKE\n\n#----------sms短信配置--------------\nsms.app-code=6999d4df3e7d48028470bbe517169a8d\nsms.template-id=M72CB42894\n\n#----------阿里云OSS配置--------------\naliyun.oss.endpoint=oss-cn-guangzhou.aliyuncs.com\naliyun.oss.access-key-id=LTAI5tHVGvYw7twoVFyruB1H\naliyun.oss.access-key-secret=r4d0EudzSvPfVMb9Zp0TfmsE32RXmN\naliyun.oss.bucketname=dcloud-link\n\n\n\n\n##----------rabbit配置--------------\nspring.rabbitmq.host=120.79.150.146\nspring.rabbitmq.port=5672\n#需要手工创建虚拟主机\nspring.rabbitmq.virtual-host=dev\nspring.rabbitmq.username=admin\nspring.rabbitmq.password=password\n#消息确认方式，manual(手动ack) 和auto(自动ack); 消息消费重试到达指定次数进到异常交换机和异常队列，需要改为自动ack确认消息\nspring.rabbitmq.listener.simple.acknowledge-mode=auto\n\n\n#开启重试，消费者代码不能添加try catch捕获不往外抛异常\nspring.rabbitmq.listener.simple.retry.enabled=true\n#最大重试次数\nspring.rabbitmq.listener.simple.retry.max-attempts=4\n# 重试消息的时间间隔，5秒\nspring.rabbitmq.listener.simple.retry.initial-interval=5000\n\n\n\n\n#----------xxl-job配置--------------\nlogging.config=classpath:logback.xml\n#调度中心部署地址,多个配置逗号分隔 \"http://address01,http://address02\"\nxxl.job.admin.addresses=http://112.74.107.230:8080/xxl-job-admin\n\n#执行器token，非空时启用 xxl-job, access token\nxxl.job.accessToken=xdclass.net\n\n# 执行器app名称,和控制台那边配置一样的名称，不然注册不上去\nxxl.job.executor.appname=traffic-app-executor\n\n# [选填]执行器注册：优先使用该配置作为注册地址，为空时使用内嵌服务 ”IP:PORT“ 作为注册地址。\n#从而更灵活的支持容器类型执行器动态IP和动态映射端口问题。\nxxl.job.executor.address=\n\n#[选填]执行器IP ：默认为空表示自动获取IP（即springboot容器的ip和端口，可以自动获取，也可以指定），多网卡时可手动设置指定IP，该IP不会绑定Host仅作为通讯实用；地址信息用于 \"执行器注册\" 和 \"调度中心请求并触发任务\"，\nxxl.job.executor.ip=\n\n# [选填]执行器端口号：小于等于0则自动获取；默认端口为9999，单机部署多个执行器时，注意要配置不同执行器端口；\nxxl.job.executor.port=9999\n\n#执行器日志文件存储路径，需要对该路径拥有读写权限；为空则使用默认路径\nxxl.job.executor.logpath=./data/logs/xxl-job/executor\n\n#执行器日志保存天数\nxxl.job.executor.logretentiondays=30\n\n\nlogging.level.com.alibaba.nacos.client.config.impl=WARN\nlogging.level.root=INFO\n\n\n', 'a4f14f765efd2a7fee9ab213cac49e3d', '2022-04-15 14:18:34', '2022-04-15 01:18:34', 'nacos', '172.31.101.9', 'U', '');
INSERT INTO `his_config_info` VALUES (6, 17, 'dcloud-account-service-dev.properties', 'DEFAULT_GROUP', '', 'server.port=8001\nspring.application.name=dcloud-account-service\nspring.cloud.nacos.discovery.server-addr=120.24.7.58:8848\nspring.cloud.nacos.discovery.username=nacos\nspring.cloud.nacos.discovery.password=nacos\nrpc.token=xdclass.net168\nspring.redis.client-type=jedis\nspring.redis.host=120.79.150.146\nspring.redis.password=xdclass.net\nspring.redis.port=6379\nspring.redis.jedis.pool.max-active=100\nspring.redis.jedis.pool.max-idle=100\nspring.redis.jedis.pool.min-idle=100\nspring.redis.jedis.pool.max-wait=60000\nspring.shardingsphere.datasource.names=ds0\nspring.shardingsphere.datasource.ds0.connectionTimeoutMilliseconds=30000\nspring.shardingsphere.datasource.ds0.driver-class-name=com.mysql.cj.jdbc.Driver\nspring.shardingsphere.datasource.ds0.idleTimeoutMilliseconds=60000\nspring.shardingsphere.datasource.ds0.jdbc-url=jdbc:mysql://120.79.150.146:3306/dcloud_account?useUnicode=true&characterEncoding=utf-8&useSSL=false&serverTimezone=Asia/Shanghai&allowPublicKeyRetrieval=true\nspring.shardingsphere.datasource.ds0.maintenanceIntervalMilliseconds=30000\nspring.shardingsphere.datasource.ds0.maxLifetimeMilliseconds=1800000\nspring.shardingsphere.datasource.ds0.maxPoolSize=50\nspring.shardingsphere.datasource.ds0.minPoolSize=50\nspring.shardingsphere.datasource.ds0.password=xdclass.net168\nspring.shardingsphere.datasource.ds0.type=com.zaxxer.hikari.HikariDataSource\nspring.shardingsphere.datasource.ds0.username=root\nspring.shardingsphere.props.sql.show=true\nspring.shardingsphere.sharding.tables.traffic.actual-data-nodes=ds0.traffic_$->{0..1}\nspring.shardingsphere.sharding.tables.traffic.table-strategy.inline.algorithm-expression=traffic_$->{ account_no % 2 }\nspring.shardingsphere.sharding.tables.traffic.table-strategy.inline.sharding-column=account_no\nspring.shardingsphere.sharding.tables.traffic.key-generator.column=id\nspring.shardingsphere.sharding.tables.traffic.key-generator.props.worker.id=${workId}\nspring.shardingsphere.sharding.tables.traffic.key-generator.type=SNOWFLAKE\n\nsms.app-code=6999d4df3e7d48028470bbe517169a8d\nsms.template-id=M72CB42894\n\naliyun.oss.endpoint=oss-cn-guangzhou.aliyuncs.com\naliyun.oss.access-key-id=LTAI5tHVGvYw7twoVFyruB1H\naliyun.oss.access-key-secret=r4d0EudzSvPfVMb9Zp0TfmsE32RXmN\naliyun.oss.bucketname=dcloud-link\nspring.rabbitmq.host=120.79.150.146\nspring.rabbitmq.port=5672\nspring.rabbitmq.virtual-host=dev\nspring.rabbitmq.username=admin\nspring.rabbitmq.password=password\nspring.rabbitmq.listener.simple.acknowledge-mode=auto\n\nspring.rabbitmq.listener.simple.retry.enabled=true\nspring.rabbitmq.listener.simple.retry.max-attempts=4\nspring.rabbitmq.listener.simple.retry.initial-interval=5000\n\n\nlogging.config=classpath:logback.xml\nxxl.job.admin.addresses=http://112.74.107.230:8080/xxl-job-admin\nxxl.job.accessToken=xdclass.net\nxxl.job.executor.appname=traffic-app-executor\nxxl.job.executor.port=9999\n\nxxl.job.executor.logpath=./data/logs/xxl-job/executor\n\nxxl.job.executor.logretentiondays=30\n\n\nlogging.level.com.alibaba.nacos.client.config.impl=WARN\nlogging.level.root=INFO\n\n\n', 'eb696ce758c710517c0d063df791d8c0', '2022-04-15 14:20:02', '2022-04-15 01:20:03', 'nacos', '172.31.101.9', 'U', '');
INSERT INTO `his_config_info` VALUES (6, 18, 'dcloud-account-service-dev.properties', 'DEFAULT_GROUP', '', 'server.port=8001\nspring.application.name=dcloud-account-service\nspring.cloud.nacos.discovery.server-addr=120.24.7.58:8848\nspring.cloud.nacos.discovery.username=nacos\nspring.cloud.nacos.discovery.password=nacos\nrpc.token=xdclass.net168\nspring.redis.client-type=jedis\nspring.redis.host=120.79.150.146\nspring.redis.password=xdclass.net\nspring.redis.port=6379\nspring.redis.jedis.pool.max-active=100\nspring.redis.jedis.pool.max-idle=100\nspring.redis.jedis.pool.min-idle=100\nspring.redis.jedis.pool.max-wait=60000\nspring.shardingsphere.datasource.names=ds0\nspring.shardingsphere.datasource.ds0.connectionTimeoutMilliseconds=30000\nspring.shardingsphere.datasource.ds0.driver-class-name=com.mysql.cj.jdbc.Driver\nspring.shardingsphere.datasource.ds0.idleTimeoutMilliseconds=60000\nspring.shardingsphere.datasource.ds0.jdbc-url=jdbc:mysql://120.79.150.146:3306/dcloud_account?useUnicode=true&characterEncoding=utf-8&useSSL=false&serverTimezone=Asia/Shanghai&allowPublicKeyRetrieval=true\nspring.shardingsphere.datasource.ds0.maintenanceIntervalMilliseconds=30000\nspring.shardingsphere.datasource.ds0.maxLifetimeMilliseconds=1800000\nspring.shardingsphere.datasource.ds0.maxPoolSize=50\nspring.shardingsphere.datasource.ds0.minPoolSize=50\nspring.shardingsphere.datasource.ds0.password=xdclass.net168\nspring.shardingsphere.datasource.ds0.type=com.zaxxer.hikari.HikariDataSource\nspring.shardingsphere.datasource.ds0.username=root\nspring.shardingsphere.props.sql.show=true\nspring.shardingsphere.sharding.tables.traffic.actual-data-nodes=ds0.traffic_$->{0..1}\nspring.shardingsphere.sharding.tables.traffic.table-strategy.inline.algorithm-expression=traffic_$->{ account_no % 2 }\nspring.shardingsphere.sharding.tables.traffic.table-strategy.inline.sharding-column=account_no\nspring.shardingsphere.sharding.tables.traffic.key-generator.column=id\nspring.shardingsphere.sharding.tables.traffic.key-generator.props.worker.id=${workId}\nspring.shardingsphere.sharding.tables.traffic.key-generator.type=SNOWFLAKE\n\nsms.app-code=6999d4df3e7d48028470bbe517169a8d\nsms.template-id=M72CB42894\n\naliyun.oss.endpoint=oss-cn-guangzhou.aliyuncs.com\naliyun.oss.access-key-id=LTAI5tHVGvYw7twoVFyruB1H\naliyun.oss.access-key-secret=r4d0EudzSvPfVMb9Zp0TfmsE32RXmN\naliyun.oss.bucketname=dcloud-link\nspring.rabbitmq.host=120.79.150.146\nspring.rabbitmq.port=5672\nspring.rabbitmq.virtual-host=dev\nspring.rabbitmq.username=admin\nspring.rabbitmq.password=password\nspring.rabbitmq.listener.simple.acknowledge-mode=auto\n\nspring.rabbitmq.listener.simple.retry.enabled=true\nspring.rabbitmq.listener.simple.retry.max-attempts=4\nspring.rabbitmq.listener.simple.retry.initial-interval=5000\n\n\nlogging.config=classpath:logback.xml\nxxl.job.admin.addresses=http://112.74.107.230:8080/xxl-job-admin\nxxl.job.accessToken=xdclass.net\nxxl.job.executor.appname=traffic-app-executor\nxxl.job.executor.port=9999\n\nxxl.job.executor.logpath=./data/logs/xxl-job/executor\nxxl.job.executor.address=\nxxl.job.executor.ip=\nxxl.job.executor.logretentiondays=30\n\n\nlogging.level.com.alibaba.nacos.client.config.impl=WARN\nlogging.level.root=INFO\n\n\n', '2c4bcb3e1f857537684fc80820cbe61f', '2022-04-16 14:23:11', '2022-04-16 01:23:12', 'nacos', '172.31.101.9', 'D', '');
INSERT INTO `his_config_info` VALUES (0, 19, 'dcloud-account-service-dev.properties', 'DEFAULT_GROUP', '', 'server.port=8001\nspring.application.name=dcloud-account-service\n\n#----------服务注册和发现--------------\nspring.cloud.nacos.discovery.server-addr=120.24.7.58:8848\nspring.cloud.nacos.discovery.username=nacos\nspring.cloud.nacos.discovery.password=nacos\n\n\n#用于rpc调用token验证\nrpc.token=xdclass.net168\n\n#-------redis连接配置-------\nspring.redis.client-type=jedis\nspring.redis.host=120.24.7.58\nspring.redis.password=xdclass.net\nspring.redis.port=6379\nspring.redis.jedis.pool.max-active=100\nspring.redis.jedis.pool.max-idle=100\nspring.redis.jedis.pool.min-idle=100\nspring.redis.jedis.pool.max-wait=60000\n\n#-------分库分表数据源配置-------\nspring.shardingsphere.datasource.names=ds0\nspring.shardingsphere.datasource.ds0.connectionTimeoutMilliseconds=30000\nspring.shardingsphere.datasource.ds0.driver-class-name=com.mysql.cj.jdbc.Driver\nspring.shardingsphere.datasource.ds0.idleTimeoutMilliseconds=60000\nspring.shardingsphere.datasource.ds0.jdbc-url=jdbc:mysql://120.79.150.146:3306/dcloud_account?useUnicode=true&characterEncoding=utf-8&useSSL=false&serverTimezone=Asia/Shanghai&allowPublicKeyRetrieval=true\nspring.shardingsphere.datasource.ds0.maintenanceIntervalMilliseconds=30000\nspring.shardingsphere.datasource.ds0.maxLifetimeMilliseconds=1800000\nspring.shardingsphere.datasource.ds0.maxPoolSize=50\nspring.shardingsphere.datasource.ds0.minPoolSize=50\nspring.shardingsphere.datasource.ds0.password=xdclass.net168\nspring.shardingsphere.datasource.ds0.type=com.zaxxer.hikari.HikariDataSource\nspring.shardingsphere.datasource.ds0.username=root\nspring.shardingsphere.props.sql.show=true\n\n# 指定traffic表的数据分布情况，配置数据节点,行表达式标识符使用 ${...} 或 $->{...}，但前者与 Spring 本身的文件占位符冲突，所以在 Spring 环境中建议使用 $->{...}\nspring.shardingsphere.sharding.tables.traffic.actual-data-nodes=ds0.traffic_$->{0..1}\n#水平分表策略+行表达式分片\nspring.shardingsphere.sharding.tables.traffic.table-strategy.inline.algorithm-expression=traffic_$->{ account_no % 2 }\nspring.shardingsphere.sharding.tables.traffic.table-strategy.inline.sharding-column=account_no\n\n#id生成策略\nspring.shardingsphere.sharding.tables.traffic.key-generator.column=id\nspring.shardingsphere.sharding.tables.traffic.key-generator.props.worker.id=${workId}\nspring.shardingsphere.sharding.tables.traffic.key-generator.type=SNOWFLAKE\n\n#----------sms短信配置--------------\nsms.app-code=6999d4df3e7d48028470bbe517169a8d\nsms.template-id=M72CB42894\n\n#----------阿里云OSS配置--------------\naliyun.oss.endpoint=oss-cn-guangzhou.aliyuncs.com\naliyun.oss.access-key-id=LTAI5tHVGvYw7twoVFyruB1H\naliyun.oss.access-key-secret=r4d0EudzSvPfVMb9Zp0TfmsE32RXmN\naliyun.oss.bucketname=dcloud-link\n\n\n\n\n##----------rabbit配置--------------\nspring.rabbitmq.host=112.74.107.230\nspring.rabbitmq.port=5672\n#需要手工创建虚拟主机\nspring.rabbitmq.virtual-host=dev\nspring.rabbitmq.username=admin\nspring.rabbitmq.password=password\n#消息确认方式，manual(手动ack) 和auto(自动ack); 消息消费重试到达指定次数进到异常交换机和异常队列，需要改为自动ack确认消息\nspring.rabbitmq.listener.simple.acknowledge-mode=auto\n\n\n#开启重试，消费者代码不能添加try catch捕获不往外抛异常\nspring.rabbitmq.listener.simple.retry.enabled=true\n#最大重试次数\nspring.rabbitmq.listener.simple.retry.max-attempts=4\n# 重试消息的时间间隔，5秒\nspring.rabbitmq.listener.simple.retry.initial-interval=5000\n\n\n\n\n#----------xxl-job配置--------------\nlogging.config=classpath:logback.xml\n#调度中心部署地址,多个配置逗号分隔 \"http://address01,http://address02\"\nxxl.job.admin.addresses=http://112.74.107.230:8080/xxl-job-admin\n\n#执行器token，非空时启用 xxl-job, access token\nxxl.job.accessToken=xdclass.net\n\n# 执行器app名称,和控制台那边配置一样的名称，不然注册不上去\nxxl.job.executor.appname=traffic-app-executor\n\n# [选填]执行器注册：优先使用该配置作为注册地址，为空时使用内嵌服务 ”IP:PORT“ 作为注册地址。\n#从而更灵活的支持容器类型执行器动态IP和动态映射端口问题。\nxxl.job.executor.address=\n\n#[选填]执行器IP ：默认为空表示自动获取IP（即springboot容器的ip和端口，可以自动获取，也可以指定），多网卡时可手动设置指定IP，该IP不会绑定Host仅作为通讯实用；地址信息用于 \"执行器注册\" 和 \"调度中心请求并触发任务\"，\nxxl.job.executor.ip=\n\n# [选填]执行器端口号：小于等于0则自动获取；默认端口为9999，单机部署多个执行器时，注意要配置不同执行器端口；\nxxl.job.executor.port=9999\n\n#执行器日志文件存储路径，需要对该路径拥有读写权限；为空则使用默认路径\nxxl.job.executor.logpath=./data/logs/xxl-job/executor\n\n#执行器日志保存天数\nxxl.job.executor.logretentiondays=30', '345c61d7f188edd23291f2fd3a773371', '2022-04-16 14:39:56', '2022-04-16 01:39:57', 'nacos', '172.31.101.9', 'I', '');
INSERT INTO `his_config_info` VALUES (13, 20, 'dcloud-account-service-dev.properties', 'DEFAULT_GROUP', '', 'server.port=8001\nspring.application.name=dcloud-account-service\n\n#----------服务注册和发现--------------\nspring.cloud.nacos.discovery.server-addr=120.24.7.58:8848\nspring.cloud.nacos.discovery.username=nacos\nspring.cloud.nacos.discovery.password=nacos\n\n\n#用于rpc调用token验证\nrpc.token=xdclass.net168\n\n#-------redis连接配置-------\nspring.redis.client-type=jedis\nspring.redis.host=120.24.7.58\nspring.redis.password=xdclass.net\nspring.redis.port=6379\nspring.redis.jedis.pool.max-active=100\nspring.redis.jedis.pool.max-idle=100\nspring.redis.jedis.pool.min-idle=100\nspring.redis.jedis.pool.max-wait=60000\n\n#-------分库分表数据源配置-------\nspring.shardingsphere.datasource.names=ds0\nspring.shardingsphere.datasource.ds0.connectionTimeoutMilliseconds=30000\nspring.shardingsphere.datasource.ds0.driver-class-name=com.mysql.cj.jdbc.Driver\nspring.shardingsphere.datasource.ds0.idleTimeoutMilliseconds=60000\nspring.shardingsphere.datasource.ds0.jdbc-url=jdbc:mysql://120.79.150.146:3306/dcloud_account?useUnicode=true&characterEncoding=utf-8&useSSL=false&serverTimezone=Asia/Shanghai&allowPublicKeyRetrieval=true\nspring.shardingsphere.datasource.ds0.maintenanceIntervalMilliseconds=30000\nspring.shardingsphere.datasource.ds0.maxLifetimeMilliseconds=1800000\nspring.shardingsphere.datasource.ds0.maxPoolSize=50\nspring.shardingsphere.datasource.ds0.minPoolSize=50\nspring.shardingsphere.datasource.ds0.password=xdclass.net168\nspring.shardingsphere.datasource.ds0.type=com.zaxxer.hikari.HikariDataSource\nspring.shardingsphere.datasource.ds0.username=root\nspring.shardingsphere.props.sql.show=true\n\n# 指定traffic表的数据分布情况，配置数据节点,行表达式标识符使用 ${...} 或 $->{...}，但前者与 Spring 本身的文件占位符冲突，所以在 Spring 环境中建议使用 $->{...}\nspring.shardingsphere.sharding.tables.traffic.actual-data-nodes=ds0.traffic_$->{0..1}\n#水平分表策略+行表达式分片\nspring.shardingsphere.sharding.tables.traffic.table-strategy.inline.algorithm-expression=traffic_$->{ account_no % 2 }\nspring.shardingsphere.sharding.tables.traffic.table-strategy.inline.sharding-column=account_no\n\n#id生成策略\nspring.shardingsphere.sharding.tables.traffic.key-generator.column=id\nspring.shardingsphere.sharding.tables.traffic.key-generator.props.worker.id=${workId}\nspring.shardingsphere.sharding.tables.traffic.key-generator.type=SNOWFLAKE\n\n#----------sms短信配置--------------\nsms.app-code=6999d4df3e7d48028470bbe517169a8d\nsms.template-id=M72CB42894\n\n#----------阿里云OSS配置--------------\naliyun.oss.endpoint=oss-cn-guangzhou.aliyuncs.com\naliyun.oss.access-key-id=LTAI5tHVGvYw7twoVFyruB1H\naliyun.oss.access-key-secret=r4d0EudzSvPfVMb9Zp0TfmsE32RXmN\naliyun.oss.bucketname=dcloud-link\n\n\n\n\n##----------rabbit配置--------------\nspring.rabbitmq.host=112.74.107.230\nspring.rabbitmq.port=5672\n#需要手工创建虚拟主机\nspring.rabbitmq.virtual-host=dev\nspring.rabbitmq.username=admin\nspring.rabbitmq.password=password\n#消息确认方式，manual(手动ack) 和auto(自动ack); 消息消费重试到达指定次数进到异常交换机和异常队列，需要改为自动ack确认消息\nspring.rabbitmq.listener.simple.acknowledge-mode=auto\n\n\n#开启重试，消费者代码不能添加try catch捕获不往外抛异常\nspring.rabbitmq.listener.simple.retry.enabled=true\n#最大重试次数\nspring.rabbitmq.listener.simple.retry.max-attempts=4\n# 重试消息的时间间隔，5秒\nspring.rabbitmq.listener.simple.retry.initial-interval=5000\n\n\n\n\n#----------xxl-job配置--------------\nlogging.config=classpath:logback.xml\n#调度中心部署地址,多个配置逗号分隔 \"http://address01,http://address02\"\nxxl.job.admin.addresses=http://112.74.107.230:8080/xxl-job-admin\n\n#执行器token，非空时启用 xxl-job, access token\nxxl.job.accessToken=xdclass.net\n\n# 执行器app名称,和控制台那边配置一样的名称，不然注册不上去\nxxl.job.executor.appname=traffic-app-executor\n\n# [选填]执行器注册：优先使用该配置作为注册地址，为空时使用内嵌服务 ”IP:PORT“ 作为注册地址。\n#从而更灵活的支持容器类型执行器动态IP和动态映射端口问题。\nxxl.job.executor.address=\n\n#[选填]执行器IP ：默认为空表示自动获取IP（即springboot容器的ip和端口，可以自动获取，也可以指定），多网卡时可手动设置指定IP，该IP不会绑定Host仅作为通讯实用；地址信息用于 \"执行器注册\" 和 \"调度中心请求并触发任务\"，\nxxl.job.executor.ip=\n\n# [选填]执行器端口号：小于等于0则自动获取；默认端口为9999，单机部署多个执行器时，注意要配置不同执行器端口；\nxxl.job.executor.port=9999\n\n#执行器日志文件存储路径，需要对该路径拥有读写权限；为空则使用默认路径\nxxl.job.executor.logpath=./data/logs/xxl-job/executor\n\n#执行器日志保存天数\nxxl.job.executor.logretentiondays=30', '345c61d7f188edd23291f2fd3a773371', '2022-04-16 14:43:40', '2022-04-16 01:43:40', 'nacos', '172.31.101.9', 'U', '');
INSERT INTO `his_config_info` VALUES (0, 21, 'dcloud-data-service-dev.properties', 'DEFAULT_GROUP', '', 'server.port=8002\nspring.application.name=dcloud-data-service\n\n#----------服务注册和发现--------------\nspring.cloud.nacos.discovery.server-addr=120.24.7.58:8848\nspring.cloud.nacos.discovery.username=nacos\nspring.cloud.nacos.discovery.password=nacos\n\nspring.datasource.driver-class-name=ru.yandex.clickhouse.ClickHouseDriver\n\nspring.datasource.url=jdbc:clickhouse://120.24.7.58:8123/default\n\nmybatis-plus.configuration.log-impl=org.apache.ibatis.logging.stdout.StdOutImpl\n\nlogging.level.root=INFO\n\n\n\n#-------redis连接配置-------\nspring.redis.client-type=jedis\nspring.redis.host=120.24.7.58\nspring.redis.password=xdclass.net\nspring.redis.port=6379\nspring.redis.jedis.pool.max-active=100\nspring.redis.jedis.pool.max-idle=100\nspring.redis.jedis.pool.min-idle=100\nspring.redis.jedis.pool.max-wait=60000\n', '4f40c3d19f69e15732c9d49a3a4b55b4', '2022-04-16 14:53:55', '2022-04-16 01:53:56', 'nacos', '172.31.101.9', 'I', '');
INSERT INTO `his_config_info` VALUES (15, 22, 'dcloud-data-service-dev.properties', 'DEFAULT_GROUP', '', 'server.port=8002\nspring.application.name=dcloud-data-service\n\n#----------服务注册和发现--------------\nspring.cloud.nacos.discovery.server-addr=120.24.7.58:8848\nspring.cloud.nacos.discovery.username=nacos\nspring.cloud.nacos.discovery.password=nacos\n\nspring.datasource.driver-class-name=ru.yandex.clickhouse.ClickHouseDriver\n\nspring.datasource.url=jdbc:clickhouse://120.24.7.58:8123/default\n\nmybatis-plus.configuration.log-impl=org.apache.ibatis.logging.stdout.StdOutImpl\n\nlogging.level.root=INFO\n\n\n\n#-------redis连接配置-------\nspring.redis.client-type=jedis\nspring.redis.host=120.24.7.58\nspring.redis.password=xdclass.net\nspring.redis.port=6379\nspring.redis.jedis.pool.max-active=100\nspring.redis.jedis.pool.max-idle=100\nspring.redis.jedis.pool.min-idle=100\nspring.redis.jedis.pool.max-wait=60000\n', '4f40c3d19f69e15732c9d49a3a4b55b4', '2022-04-16 14:54:35', '2022-04-16 01:54:36', 'nacos', '172.31.101.9', 'U', '');
INSERT INTO `his_config_info` VALUES (0, 23, 'dcloud-shop-service-dev.properties', 'DEFAULT_GROUP', '', 'server.port=8005\nspring.application.name=dcloud-shop-service\n\n#----------服务注册和发现--------------\nspring.cloud.nacos.discovery.server-addr=120.24.7.58:8848\nspring.cloud.nacos.discovery.username=nacos\nspring.cloud.nacos.discovery.password=nacos\n\n\n\n#-------分库分表数据源配置-------\nspring.shardingsphere.datasource.names=ds0\nspring.shardingsphere.datasource.ds0.connectionTimeoutMilliseconds=30000\nspring.shardingsphere.datasource.ds0.driver-class-name=com.mysql.cj.jdbc.Driver\nspring.shardingsphere.datasource.ds0.idleTimeoutMilliseconds=60000\nspring.shardingsphere.datasource.ds0.jdbc-url=jdbc:mysql://120.79.150.146:3306/dcloud_shop?useUnicode=true&characterEncoding=utf-8&useSSL=false&serverTimezone=Asia/Shanghai&allowPublicKeyRetrieval=true\nspring.shardingsphere.datasource.ds0.maintenanceIntervalMilliseconds=30000\nspring.shardingsphere.datasource.ds0.maxLifetimeMilliseconds=1800000\nspring.shardingsphere.datasource.ds0.maxPoolSize=50\nspring.shardingsphere.datasource.ds0.minPoolSize=50\nspring.shardingsphere.datasource.ds0.password=xdclass.net168\nspring.shardingsphere.datasource.ds0.type=com.zaxxer.hikari.HikariDataSource\nspring.shardingsphere.datasource.ds0.username=root\nspring.shardingsphere.props.sql.show=true\n\n\n\n#----------配置默认数据库，比如短链域名，不分库分表--------------\nspring.shardingsphere.sharding.default-data-source-name=ds0\n#默认id生成策略\nspring.shardingsphere.sharding.default-key-generator.column=id\nspring.shardingsphere.sharding.default-key-generator.type=SNOWFLAKE\nspring.shardingsphere.sharding.default-key-generator.props.worker.id=${workerId}\n\n\n# 指定product_order表的数据分布情况，配置数据节点,行表达式标识符使用 ${...} 或 $->{...}，但前者与 Spring 本身的文件占位符冲突，所以在 Spring 环境中建议使用 $->{...}\nspring.shardingsphere.sharding.tables.product_order.actual-data-nodes=ds0.product_order_$->{0..1}\n#水平分表策略+行表达式分片\nspring.shardingsphere.sharding.tables.product_order.table-strategy.inline.algorithm-expression=product_order_$->{ account_no % 2 }\nspring.shardingsphere.sharding.tables.product_order.table-strategy.inline.sharding-column=account_no\n\n\n\n\n#-------redis连接配置-------\nspring.redis.client-type=jedis\nspring.redis.host=120.24.7.58\nspring.redis.password=xdclass.net\nspring.redis.port=6379\nspring.redis.jedis.pool.max-active=100\nspring.redis.jedis.pool.max-idle=100\nspring.redis.jedis.pool.min-idle=100\nspring.redis.jedis.pool.max-wait=60000\n\n\n\n##----------rabbit配置--------------\nspring.rabbitmq.host=112.74.107.230\nspring.rabbitmq.port=5672\n#需要手工创建虚拟主机\nspring.rabbitmq.virtual-host=dev\nspring.rabbitmq.username=admin\nspring.rabbitmq.password=password\n#消息确认方式，manual(手动ack) 和auto(自动ack); 消息消费重试到达指定次数进到异常交换机和异常队列，需要改为自动ack确认消息\nspring.rabbitmq.listener.simple.acknowledge-mode=auto\n\n\n#开启重试，消费者代码不能添加try catch捕获不往外抛异常\nspring.rabbitmq.listener.simple.retry.enabled=true\n#最大重试次数\nspring.rabbitmq.listener.simple.retry.max-attempts=4\n# 重试消息的时间间隔，5秒\nspring.rabbitmq.listener.simple.retry.initial-interval=5000\n\n\n\n##----------微信支付参数--------------\n\n#商户号\npay.wechat.mch-id=1601644442\n#公众号id 需要和商户号绑定\npay.wechat.wx-pay-appid=wx5beac15ca207c40c\n#商户证书序列号,需要和证书对应\npay.wechat.mch-serial-no=7064ADC5FE84CA2A3DDE71A692E39602DEB96E61\n#API V3密钥\npay.wechat.api-v3-key=adP9a0wWjITE5n2oKNP5lfYesxdclass\n\n#商户私钥路径（微信服务端会根据证书序列号，找到证书获取公钥进行解密数据）\npay.wechat.private-key-path=classpath:/cert/apiclient_key.pem\n#支付成功页面跳转\npay.wechat.success-return-url=https://xdclass.net\n#支付成功，回调通知\npay.wechat.callback-url=http://gvf84j.natappfree.cc/api/callback/order/v1/wechat\n\n\n\n\nlogging.level.com.alibaba.nacos.client.config.impl=WARN\nlogging.level.root=INFO', '3033d3db4037837a5266a403d04c0926', '2022-04-16 14:58:39', '2022-04-16 01:58:39', 'nacos', '172.31.101.9', 'I', '');
INSERT INTO `his_config_info` VALUES (0, 24, 'dcloud-link-service-dev.properties', 'DEFAULT_GROUP', '', 'server.port=8003\nspring.application.name=dcloud-link-service\n\n#服务注册发现\nspring.cloud.nacos.discovery.server-addr=120.24.7.58:8848\nspring.cloud.nacos.discovery.username=nacos\nspring.cloud.nacos.discovery.password=nacos\n\n\n#用于rpc调用token验证\nrpc.token=xdclass.net168\n\n#分库分表配置\nspring.shardingsphere.datasource.names=ds0,ds1,dsa\nspring.shardingsphere.props.sql.show=true\n\n#ds0配置\nspring.shardingsphere.datasource.ds0.connectionTimeoutMilliseconds=30000\nspring.shardingsphere.datasource.ds0.driver-class-name=com.mysql.cj.jdbc.Driver\nspring.shardingsphere.datasource.ds0.idleTimeoutMilliseconds=60000\nspring.shardingsphere.datasource.ds0.jdbc-url=jdbc:mysql://120.79.150.146:3306/dcloud_link_0?useUnicode=true&characterEncoding=utf-8&useSSL=false&serverTimezone=Asia/Shanghai&allowPublicKeyRetrieval=true\nspring.shardingsphere.datasource.ds0.type=com.zaxxer.hikari.HikariDataSource\nspring.shardingsphere.datasource.ds0.maintenanceIntervalMilliseconds=30000\nspring.shardingsphere.datasource.ds0.maxLifetimeMilliseconds=1800000\nspring.shardingsphere.datasource.ds0.maxPoolSize=50\nspring.shardingsphere.datasource.ds0.minPoolSize=50\nspring.shardingsphere.datasource.ds0.username=root\nspring.shardingsphere.datasource.ds0.password=xdclass.net168\n\n#ds1配置\nspring.shardingsphere.datasource.ds1.connectionTimeoutMilliseconds=30000\nspring.shardingsphere.datasource.ds1.driver-class-name=com.mysql.cj.jdbc.Driver\nspring.shardingsphere.datasource.ds1.idleTimeoutMilliseconds=60000\nspring.shardingsphere.datasource.ds1.jdbc-url=jdbc:mysql://120.79.150.146:3306/dcloud_link_1?useUnicode=true&characterEncoding=utf-8&useSSL=false&serverTimezone=Asia/Shanghai&allowPublicKeyRetrieval=true\nspring.shardingsphere.datasource.ds1.type=com.zaxxer.hikari.HikariDataSource\nspring.shardingsphere.datasource.ds1.maintenanceIntervalMilliseconds=30000\nspring.shardingsphere.datasource.ds1.maxLifetimeMilliseconds=1800000\nspring.shardingsphere.datasource.ds1.maxPoolSize=50\nspring.shardingsphere.datasource.ds1.minPoolSize=50\nspring.shardingsphere.datasource.ds1.username=root\nspring.shardingsphere.datasource.ds1.password=xdclass.net168\n\n#dsa配置\nspring.shardingsphere.datasource.dsa.connectionTimeoutMilliseconds=30000\nspring.shardingsphere.datasource.dsa.driver-class-name=com.mysql.cj.jdbc.Driver\nspring.shardingsphere.datasource.dsa.idleTimeoutMilliseconds=60000\nspring.shardingsphere.datasource.dsa.jdbc-url=jdbc:mysql://120.79.150.146:3306/dcloud_link_a?useUnicode=true&characterEncoding=utf-8&useSSL=false&serverTimezone=Asia/Shanghai&allowPublicKeyRetrieval=true\nspring.shardingsphere.datasource.dsa.type=com.zaxxer.hikari.HikariDataSource\nspring.shardingsphere.datasource.dsa.maintenanceIntervalMilliseconds=30000\nspring.shardingsphere.datasource.dsa.maxLifetimeMilliseconds=1800000\nspring.shardingsphere.datasource.dsa.maxPoolSize=50\nspring.shardingsphere.datasource.dsa.minPoolSize=50\nspring.shardingsphere.datasource.dsa.username=root\nspring.shardingsphere.datasource.dsa.password=xdclass.net168\n\n\n#----------配置默认数据库，比如短链域名，不分库分表--------------\nspring.shardingsphere.sharding.default-data-source-name=ds0\n#默认id生成策略\nspring.shardingsphere.sharding.default-key-generator.column=id\nspring.shardingsphere.sharding.default-key-generator.type=SNOWFLAKE\nspring.shardingsphere.sharding.default-key-generator.props.worker.id=${workerId}\n\n\n\n\n#----------短链组，策略：水平分库，水平分表(1张表)--------------\n# 先进行水平分库， 水平分库策略，行表达式分片\nspring.shardingsphere.sharding.tables.link_group.database-strategy.inline.sharding-column=account_no\nspring.shardingsphere.sharding.tables.link_group.database-strategy.inline.algorithm-expression=ds$->{account_no % 2}\n\n\n#----------短链，策略：分库+分表--------------\n# 先进行水平分库，然后再水平分表\nspring.shardingsphere.sharding.tables.short_link.database-strategy.standard.sharding-column=code\nspring.shardingsphere.sharding.tables.short_link.database-strategy.standard.precise-algorithm-class-name=net.xdclass.strategy.CustomDBPreciseShardingAlgorithm\n\n\n# 水平分表策略，自定义策略。   真实库.逻辑表\nspring.shardingsphere.sharding.tables.short_link.actual-data-nodes=ds0.short_link,ds1.short_link,dsa.short_link\nspring.shardingsphere.sharding.tables.short_link.table-strategy.standard.sharding-column=code\nspring.shardingsphere.sharding.tables.short_link.table-strategy.standard.precise-algorithm-class-name=net.xdclass.strategy.CustomTablePreciseShardingAlgorithm\n\n\n\n\n##---------- 组+短链码mapping表，策略：分库+分表--------------\n# 先进行水平分库，然后再水平分表， 水平分库策略，行表达式分片\nspring.shardingsphere.sharding.tables.group_code_mapping.database-strategy.inline.sharding-column=account_no\nspring.shardingsphere.sharding.tables.group_code_mapping.database-strategy.inline.algorithm-expression=ds$->{account_no % 2}\n\n# 分表策略+行表达式分片\nspring.shardingsphere.sharding.tables.group_code_mapping.actual-data-nodes=ds$->{0..1}.group_code_mapping_$->{0..1}\nspring.shardingsphere.sharding.tables.group_code_mapping.table-strategy.inline.sharding-column=group_id\nspring.shardingsphere.sharding.tables.group_code_mapping.table-strategy.inline.algorithm-expression=group_code_mapping_$->{group_id % 2}\n\n\n\n\n\n\n\n##----------rabbit配置--------------\nspring.rabbitmq.host=112.74.107.230\nspring.rabbitmq.port=5672\n#需要手工创建虚拟主机\nspring.rabbitmq.virtual-host=dev\nspring.rabbitmq.username=admin\nspring.rabbitmq.password=password\n#消息确认方式，manual(手动ack) 和auto(自动ack); 消息消费重试到达指定次数进到异常交换机和异常队列，需要改为自动ack确认消息\nspring.rabbitmq.listener.simple.acknowledge-mode=auto\n\n\n#开启重试，消费者代码不能添加try catch捕获不往外抛异常\nspring.rabbitmq.listener.simple.retry.enabled=true\n#最大重试次数\nspring.rabbitmq.listener.simple.retry.max-attempts=4\n# 重试消息的时间间隔，5秒\nspring.rabbitmq.listener.simple.retry.initial-interval=5000\n\n\n#-------redis连接配置-------\nspring.redis.client-type=jedis\nspring.redis.host=120.24.7.58\nspring.redis.password=xdclass.net\nspring.redis.port=6379\nspring.redis.jedis.pool.max-active=100\nspring.redis.jedis.pool.max-idle=100\nspring.redis.jedis.pool.min-idle=100\nspring.redis.jedis.pool.max-wait=60000\n\n\n#----------kafka配置--------------\nspring.kafka.bootstrap-servers=120.24.7.58:9092\nspring.kafka.producer.key-serializer=org.apache.kafka.common.serialization.StringSerializer\nspring.kafka.producer.value-serializer=org.apache.kafka.common.serialization.StringSerializer', 'e9c7aef63e7542e12c06db45053f7070', '2022-04-16 15:02:22', '2022-04-16 02:02:22', 'nacos', '172.31.101.9', 'I', '');
INSERT INTO `his_config_info` VALUES (0, 25, 'dcloud-link-service-dev.yaml', 'DEFAULT_GROUP', '', 'server:\n  port: 8888\n\n\n#应用名称\nspring:\n  application:\n    name: dcloud-gateway\n\n#服务注册发现\n  cloud:\n    nacos:\n      discovery:\n        server-addr: 120.24.7.58:8848\n        username: nacos\n        password: nacos\n\n\n    gateway:\n      routes: #数组形式\n        - id: dcloud-link-api-service  #数据服务 路由唯一标识\n          uri: lb://dcloud-link-service  #从nocas进行转发\n          order: 1 #优先级，数字越小优先级越高\n          predicates: #断言 配置哪个路径才转发，前端访问路径统一加上XXX-server，网关判断转发对应的服务，如果是回调业务记得修改\n            - Path=/* #匹配一个路径,用于短链解析\n\n        - id: dcloud-link-service  #数据服务 路由唯一标识\n          uri: lb://dcloud-link-service  #从nocas进行转发\n          order: 2 #优先级，数字越小优先级越高\n          predicates: #断言 配置哪个路径才转发，前端访问路径统一加上XXX-server，网关判断转发对应的服务，如果是回调业务记得修改\n            - Path=/link-server/**\n          filters: #过滤器，请求在传递过程中通过过滤器修改\n            - StripPrefix=1  #去掉第一层前缀，转发给后续的路径\n\n        - id: dcloud-data-service  #数据服务 路由唯一标识\n          uri: lb://dcloud-data-service  #从nocas进行转发\n          order: 3 #优先级，数字越小优先级越高\n          predicates: #断言 配置哪个路径才转发，前端访问路径统一加上XXX-server，网关判断转发对应的服务，如果是回调业务记得修改\n            - Path=/data-server/**\n          filters: #过滤器，请求在传递过程中通过过滤器修改\n            - StripPrefix=1  #去掉第一层前缀，转发给后续的路径\n\n        - id: dcloud-account-service  #用户服务 路由唯一标识\n          uri: lb://dcloud-account-service  #从nocas进行转发\n          order: 4 #优先级，数字越小优先级越高\n          predicates: #断言 配置哪个路径才转发，前端访问路径统一加上XXX-server，网关判断转发对应的服务，如果是回调业务记得修改\n            - Path=/account-server/**\n          filters: #过滤器，请求在传递过程中通过过滤器修改\n            - StripPrefix=1  #去掉第一层前缀，转发给后续的路径\n\n        - id: dcloud-shop-service  #用户服务 路由唯一标识\n          uri: lb://dcloud-shop-service  #从nocas进行转发\n          order: 5 #优先级，数字越小优先级越高\n          predicates: #断言 配置哪个路径才转发，前端访问路径统一加上XXX-server，网关判断转发对应的服务，如果是回调业务记得修改\n            - Path=/shop-server/**\n          filters: #过滤器，请求在传递过程中通过过滤器修改\n            - StripPrefix=1  #去掉第一层前缀，转发给后续的路径\n\n\n      #开启网关拉取nacos的服务\n      discovery:\n        locator:\n          enabled: true\n\n#设置日志级别,ERROR/WARN/INFO/DEBUG,默认是INFO以上才显示\nlogging:\n  level:\n    root: INFO\n    #nacos日志问题\n    com.alibaba.nacos.client.config.impl: WARN\n', '4b7b8e1b18b942a297d6e55ea558bc3b', '2022-04-16 15:06:25', '2022-04-16 02:06:26', 'nacos', '172.31.101.9', 'I', '');
INSERT INTO `his_config_info` VALUES (19, 26, 'dcloud-link-service-dev.yaml', 'DEFAULT_GROUP', '', 'server:\n  port: 8888\n\n\n#应用名称\nspring:\n  application:\n    name: dcloud-gateway\n\n#服务注册发现\n  cloud:\n    nacos:\n      discovery:\n        server-addr: 120.24.7.58:8848\n        username: nacos\n        password: nacos\n\n\n    gateway:\n      routes: #数组形式\n        - id: dcloud-link-api-service  #数据服务 路由唯一标识\n          uri: lb://dcloud-link-service  #从nocas进行转发\n          order: 1 #优先级，数字越小优先级越高\n          predicates: #断言 配置哪个路径才转发，前端访问路径统一加上XXX-server，网关判断转发对应的服务，如果是回调业务记得修改\n            - Path=/* #匹配一个路径,用于短链解析\n\n        - id: dcloud-link-service  #数据服务 路由唯一标识\n          uri: lb://dcloud-link-service  #从nocas进行转发\n          order: 2 #优先级，数字越小优先级越高\n          predicates: #断言 配置哪个路径才转发，前端访问路径统一加上XXX-server，网关判断转发对应的服务，如果是回调业务记得修改\n            - Path=/link-server/**\n          filters: #过滤器，请求在传递过程中通过过滤器修改\n            - StripPrefix=1  #去掉第一层前缀，转发给后续的路径\n\n        - id: dcloud-data-service  #数据服务 路由唯一标识\n          uri: lb://dcloud-data-service  #从nocas进行转发\n          order: 3 #优先级，数字越小优先级越高\n          predicates: #断言 配置哪个路径才转发，前端访问路径统一加上XXX-server，网关判断转发对应的服务，如果是回调业务记得修改\n            - Path=/data-server/**\n          filters: #过滤器，请求在传递过程中通过过滤器修改\n            - StripPrefix=1  #去掉第一层前缀，转发给后续的路径\n\n        - id: dcloud-account-service  #用户服务 路由唯一标识\n          uri: lb://dcloud-account-service  #从nocas进行转发\n          order: 4 #优先级，数字越小优先级越高\n          predicates: #断言 配置哪个路径才转发，前端访问路径统一加上XXX-server，网关判断转发对应的服务，如果是回调业务记得修改\n            - Path=/account-server/**\n          filters: #过滤器，请求在传递过程中通过过滤器修改\n            - StripPrefix=1  #去掉第一层前缀，转发给后续的路径\n\n        - id: dcloud-shop-service  #用户服务 路由唯一标识\n          uri: lb://dcloud-shop-service  #从nocas进行转发\n          order: 5 #优先级，数字越小优先级越高\n          predicates: #断言 配置哪个路径才转发，前端访问路径统一加上XXX-server，网关判断转发对应的服务，如果是回调业务记得修改\n            - Path=/shop-server/**\n          filters: #过滤器，请求在传递过程中通过过滤器修改\n            - StripPrefix=1  #去掉第一层前缀，转发给后续的路径\n\n\n      #开启网关拉取nacos的服务\n      discovery:\n        locator:\n          enabled: true\n\n#设置日志级别,ERROR/WARN/INFO/DEBUG,默认是INFO以上才显示\nlogging:\n  level:\n    root: INFO\n    #nacos日志问题\n    com.alibaba.nacos.client.config.impl: WARN\n', '4b7b8e1b18b942a297d6e55ea558bc3b', '2022-04-16 15:08:16', '2022-04-16 02:08:16', 'nacos', '172.31.101.9', 'D', '');
INSERT INTO `his_config_info` VALUES (0, 27, 'dcloud-gateway-dev.yaml', 'DEFAULT_GROUP', '', 'server:\n  port: 8888\n\n\n#应用名称\nspring:\n  application:\n    name: dcloud-gateway\n\n#服务注册发现\n  cloud:\n    nacos:\n      discovery:\n        server-addr: 120.24.7.58:8848\n        username: nacos\n        password: nacos\n\n\n    gateway:\n      routes: #数组形式\n        - id: dcloud-link-api-service  #数据服务 路由唯一标识\n          uri: lb://dcloud-link-service  #从nocas进行转发\n          order: 1 #优先级，数字越小优先级越高\n          predicates: #断言 配置哪个路径才转发，前端访问路径统一加上XXX-server，网关判断转发对应的服务，如果是回调业务记得修改\n            - Path=/* #匹配一个路径,用于短链解析\n\n        - id: dcloud-link-service  #数据服务 路由唯一标识\n          uri: lb://dcloud-link-service  #从nocas进行转发\n          order: 2 #优先级，数字越小优先级越高\n          predicates: #断言 配置哪个路径才转发，前端访问路径统一加上XXX-server，网关判断转发对应的服务，如果是回调业务记得修改\n            - Path=/link-server/**\n          filters: #过滤器，请求在传递过程中通过过滤器修改\n            - StripPrefix=1  #去掉第一层前缀，转发给后续的路径\n\n        - id: dcloud-data-service  #数据服务 路由唯一标识\n          uri: lb://dcloud-data-service  #从nocas进行转发\n          order: 3 #优先级，数字越小优先级越高\n          predicates: #断言 配置哪个路径才转发，前端访问路径统一加上XXX-server，网关判断转发对应的服务，如果是回调业务记得修改\n            - Path=/data-server/**\n          filters: #过滤器，请求在传递过程中通过过滤器修改\n            - StripPrefix=1  #去掉第一层前缀，转发给后续的路径\n\n        - id: dcloud-account-service  #用户服务 路由唯一标识\n          uri: lb://dcloud-account-service  #从nocas进行转发\n          order: 4 #优先级，数字越小优先级越高\n          predicates: #断言 配置哪个路径才转发，前端访问路径统一加上XXX-server，网关判断转发对应的服务，如果是回调业务记得修改\n            - Path=/account-server/**\n          filters: #过滤器，请求在传递过程中通过过滤器修改\n            - StripPrefix=1  #去掉第一层前缀，转发给后续的路径\n\n        - id: dcloud-shop-service  #用户服务 路由唯一标识\n          uri: lb://dcloud-shop-service  #从nocas进行转发\n          order: 5 #优先级，数字越小优先级越高\n          predicates: #断言 配置哪个路径才转发，前端访问路径统一加上XXX-server，网关判断转发对应的服务，如果是回调业务记得修改\n            - Path=/shop-server/**\n          filters: #过滤器，请求在传递过程中通过过滤器修改\n            - StripPrefix=1  #去掉第一层前缀，转发给后续的路径\n\n\n      #开启网关拉取nacos的服务\n      discovery:\n        locator:\n          enabled: true\n\n#设置日志级别,ERROR/WARN/INFO/DEBUG,默认是INFO以上才显示\nlogging:\n  level:\n    root: INFO\n    #nacos日志问题\n    com.alibaba.nacos.client.config.impl: WARN\n', '4b7b8e1b18b942a297d6e55ea558bc3b', '2022-04-16 15:08:38', '2022-04-16 02:08:39', 'nacos', '172.31.101.9', 'I', '');
INSERT INTO `his_config_info` VALUES (18, 28, 'dcloud-link-service-dev.properties', 'DEFAULT_GROUP', '', 'server.port=8003\nspring.application.name=dcloud-link-service\n\n#服务注册发现\nspring.cloud.nacos.discovery.server-addr=120.24.7.58:8848\nspring.cloud.nacos.discovery.username=nacos\nspring.cloud.nacos.discovery.password=nacos\n\n\n#用于rpc调用token验证\nrpc.token=xdclass.net168\n\n#分库分表配置\nspring.shardingsphere.datasource.names=ds0,ds1,dsa\nspring.shardingsphere.props.sql.show=true\n\n#ds0配置\nspring.shardingsphere.datasource.ds0.connectionTimeoutMilliseconds=30000\nspring.shardingsphere.datasource.ds0.driver-class-name=com.mysql.cj.jdbc.Driver\nspring.shardingsphere.datasource.ds0.idleTimeoutMilliseconds=60000\nspring.shardingsphere.datasource.ds0.jdbc-url=jdbc:mysql://120.79.150.146:3306/dcloud_link_0?useUnicode=true&characterEncoding=utf-8&useSSL=false&serverTimezone=Asia/Shanghai&allowPublicKeyRetrieval=true\nspring.shardingsphere.datasource.ds0.type=com.zaxxer.hikari.HikariDataSource\nspring.shardingsphere.datasource.ds0.maintenanceIntervalMilliseconds=30000\nspring.shardingsphere.datasource.ds0.maxLifetimeMilliseconds=1800000\nspring.shardingsphere.datasource.ds0.maxPoolSize=50\nspring.shardingsphere.datasource.ds0.minPoolSize=50\nspring.shardingsphere.datasource.ds0.username=root\nspring.shardingsphere.datasource.ds0.password=xdclass.net168\n\n#ds1配置\nspring.shardingsphere.datasource.ds1.connectionTimeoutMilliseconds=30000\nspring.shardingsphere.datasource.ds1.driver-class-name=com.mysql.cj.jdbc.Driver\nspring.shardingsphere.datasource.ds1.idleTimeoutMilliseconds=60000\nspring.shardingsphere.datasource.ds1.jdbc-url=jdbc:mysql://120.79.150.146:3306/dcloud_link_1?useUnicode=true&characterEncoding=utf-8&useSSL=false&serverTimezone=Asia/Shanghai&allowPublicKeyRetrieval=true\nspring.shardingsphere.datasource.ds1.type=com.zaxxer.hikari.HikariDataSource\nspring.shardingsphere.datasource.ds1.maintenanceIntervalMilliseconds=30000\nspring.shardingsphere.datasource.ds1.maxLifetimeMilliseconds=1800000\nspring.shardingsphere.datasource.ds1.maxPoolSize=50\nspring.shardingsphere.datasource.ds1.minPoolSize=50\nspring.shardingsphere.datasource.ds1.username=root\nspring.shardingsphere.datasource.ds1.password=xdclass.net168\n\n#dsa配置\nspring.shardingsphere.datasource.dsa.connectionTimeoutMilliseconds=30000\nspring.shardingsphere.datasource.dsa.driver-class-name=com.mysql.cj.jdbc.Driver\nspring.shardingsphere.datasource.dsa.idleTimeoutMilliseconds=60000\nspring.shardingsphere.datasource.dsa.jdbc-url=jdbc:mysql://120.79.150.146:3306/dcloud_link_a?useUnicode=true&characterEncoding=utf-8&useSSL=false&serverTimezone=Asia/Shanghai&allowPublicKeyRetrieval=true\nspring.shardingsphere.datasource.dsa.type=com.zaxxer.hikari.HikariDataSource\nspring.shardingsphere.datasource.dsa.maintenanceIntervalMilliseconds=30000\nspring.shardingsphere.datasource.dsa.maxLifetimeMilliseconds=1800000\nspring.shardingsphere.datasource.dsa.maxPoolSize=50\nspring.shardingsphere.datasource.dsa.minPoolSize=50\nspring.shardingsphere.datasource.dsa.username=root\nspring.shardingsphere.datasource.dsa.password=xdclass.net168\n\n\n#----------配置默认数据库，比如短链域名，不分库分表--------------\nspring.shardingsphere.sharding.default-data-source-name=ds0\n#默认id生成策略\nspring.shardingsphere.sharding.default-key-generator.column=id\nspring.shardingsphere.sharding.default-key-generator.type=SNOWFLAKE\nspring.shardingsphere.sharding.default-key-generator.props.worker.id=${workerId}\n\n\n\n\n#----------短链组，策略：水平分库，水平分表(1张表)--------------\n# 先进行水平分库， 水平分库策略，行表达式分片\nspring.shardingsphere.sharding.tables.link_group.database-strategy.inline.sharding-column=account_no\nspring.shardingsphere.sharding.tables.link_group.database-strategy.inline.algorithm-expression=ds$->{account_no % 2}\n\n\n#----------短链，策略：分库+分表--------------\n# 先进行水平分库，然后再水平分表\nspring.shardingsphere.sharding.tables.short_link.database-strategy.standard.sharding-column=code\nspring.shardingsphere.sharding.tables.short_link.database-strategy.standard.precise-algorithm-class-name=net.xdclass.strategy.CustomDBPreciseShardingAlgorithm\n\n\n# 水平分表策略，自定义策略。   真实库.逻辑表\nspring.shardingsphere.sharding.tables.short_link.actual-data-nodes=ds0.short_link,ds1.short_link,dsa.short_link\nspring.shardingsphere.sharding.tables.short_link.table-strategy.standard.sharding-column=code\nspring.shardingsphere.sharding.tables.short_link.table-strategy.standard.precise-algorithm-class-name=net.xdclass.strategy.CustomTablePreciseShardingAlgorithm\n\n\n\n\n##---------- 组+短链码mapping表，策略：分库+分表--------------\n# 先进行水平分库，然后再水平分表， 水平分库策略，行表达式分片\nspring.shardingsphere.sharding.tables.group_code_mapping.database-strategy.inline.sharding-column=account_no\nspring.shardingsphere.sharding.tables.group_code_mapping.database-strategy.inline.algorithm-expression=ds$->{account_no % 2}\n\n# 分表策略+行表达式分片\nspring.shardingsphere.sharding.tables.group_code_mapping.actual-data-nodes=ds$->{0..1}.group_code_mapping_$->{0..1}\nspring.shardingsphere.sharding.tables.group_code_mapping.table-strategy.inline.sharding-column=group_id\nspring.shardingsphere.sharding.tables.group_code_mapping.table-strategy.inline.algorithm-expression=group_code_mapping_$->{group_id % 2}\n\n\n\n\n\n\n\n##----------rabbit配置--------------\nspring.rabbitmq.host=112.74.107.230\nspring.rabbitmq.port=5672\n#需要手工创建虚拟主机\nspring.rabbitmq.virtual-host=dev\nspring.rabbitmq.username=admin\nspring.rabbitmq.password=password\n#消息确认方式，manual(手动ack) 和auto(自动ack); 消息消费重试到达指定次数进到异常交换机和异常队列，需要改为自动ack确认消息\nspring.rabbitmq.listener.simple.acknowledge-mode=auto\n\n\n#开启重试，消费者代码不能添加try catch捕获不往外抛异常\nspring.rabbitmq.listener.simple.retry.enabled=true\n#最大重试次数\nspring.rabbitmq.listener.simple.retry.max-attempts=4\n# 重试消息的时间间隔，5秒\nspring.rabbitmq.listener.simple.retry.initial-interval=5000\n\n\n#-------redis连接配置-------\nspring.redis.client-type=jedis\nspring.redis.host=120.24.7.58\nspring.redis.password=xdclass.net\nspring.redis.port=6379\nspring.redis.jedis.pool.max-active=100\nspring.redis.jedis.pool.max-idle=100\nspring.redis.jedis.pool.min-idle=100\nspring.redis.jedis.pool.max-wait=60000\n\n\n#----------kafka配置--------------\nspring.kafka.bootstrap-servers=120.24.7.58:9092\nspring.kafka.producer.key-serializer=org.apache.kafka.common.serialization.StringSerializer\nspring.kafka.producer.value-serializer=org.apache.kafka.common.serialization.StringSerializer', 'e9c7aef63e7542e12c06db45053f7070', '2022-04-16 15:15:39', '2022-04-16 02:15:40', 'nacos', '172.31.101.9', 'U', '');
INSERT INTO `his_config_info` VALUES (20, 29, 'dcloud-gateway-dev.yaml', 'DEFAULT_GROUP', '', 'server:\n  port: 8888\n\n\n#应用名称\nspring:\n  application:\n    name: dcloud-gateway\n\n#服务注册发现\n  cloud:\n    nacos:\n      discovery:\n        server-addr: 120.24.7.58:8848\n        username: nacos\n        password: nacos\n\n\n    gateway:\n      routes: #数组形式\n        - id: dcloud-link-api-service  #数据服务 路由唯一标识\n          uri: lb://dcloud-link-service  #从nocas进行转发\n          order: 1 #优先级，数字越小优先级越高\n          predicates: #断言 配置哪个路径才转发，前端访问路径统一加上XXX-server，网关判断转发对应的服务，如果是回调业务记得修改\n            - Path=/* #匹配一个路径,用于短链解析\n\n        - id: dcloud-link-service  #数据服务 路由唯一标识\n          uri: lb://dcloud-link-service  #从nocas进行转发\n          order: 2 #优先级，数字越小优先级越高\n          predicates: #断言 配置哪个路径才转发，前端访问路径统一加上XXX-server，网关判断转发对应的服务，如果是回调业务记得修改\n            - Path=/link-server/**\n          filters: #过滤器，请求在传递过程中通过过滤器修改\n            - StripPrefix=1  #去掉第一层前缀，转发给后续的路径\n\n        - id: dcloud-data-service  #数据服务 路由唯一标识\n          uri: lb://dcloud-data-service  #从nocas进行转发\n          order: 3 #优先级，数字越小优先级越高\n          predicates: #断言 配置哪个路径才转发，前端访问路径统一加上XXX-server，网关判断转发对应的服务，如果是回调业务记得修改\n            - Path=/data-server/**\n          filters: #过滤器，请求在传递过程中通过过滤器修改\n            - StripPrefix=1  #去掉第一层前缀，转发给后续的路径\n\n        - id: dcloud-account-service  #用户服务 路由唯一标识\n          uri: lb://dcloud-account-service  #从nocas进行转发\n          order: 4 #优先级，数字越小优先级越高\n          predicates: #断言 配置哪个路径才转发，前端访问路径统一加上XXX-server，网关判断转发对应的服务，如果是回调业务记得修改\n            - Path=/account-server/**\n          filters: #过滤器，请求在传递过程中通过过滤器修改\n            - StripPrefix=1  #去掉第一层前缀，转发给后续的路径\n\n        - id: dcloud-shop-service  #用户服务 路由唯一标识\n          uri: lb://dcloud-shop-service  #从nocas进行转发\n          order: 5 #优先级，数字越小优先级越高\n          predicates: #断言 配置哪个路径才转发，前端访问路径统一加上XXX-server，网关判断转发对应的服务，如果是回调业务记得修改\n            - Path=/shop-server/**\n          filters: #过滤器，请求在传递过程中通过过滤器修改\n            - StripPrefix=1  #去掉第一层前缀，转发给后续的路径\n\n\n      #开启网关拉取nacos的服务\n      discovery:\n        locator:\n          enabled: true\n\n#设置日志级别,ERROR/WARN/INFO/DEBUG,默认是INFO以上才显示\nlogging:\n  level:\n    root: INFO\n    #nacos日志问题\n    com.alibaba.nacos.client.config.impl: WARN\n', '4b7b8e1b18b942a297d6e55ea558bc3b', '2022-04-24 18:25:01', '2022-04-24 05:25:01', 'nacos', '172.31.101.9', 'U', '');
INSERT INTO `his_config_info` VALUES (17, 30, 'dcloud-shop-service-dev.properties', 'DEFAULT_GROUP', '', 'server.port=8005\nspring.application.name=dcloud-shop-service\n\n#----------服务注册和发现--------------\nspring.cloud.nacos.discovery.server-addr=120.24.7.58:8848\nspring.cloud.nacos.discovery.username=nacos\nspring.cloud.nacos.discovery.password=nacos\n\n\n\n#-------分库分表数据源配置-------\nspring.shardingsphere.datasource.names=ds0\nspring.shardingsphere.datasource.ds0.connectionTimeoutMilliseconds=30000\nspring.shardingsphere.datasource.ds0.driver-class-name=com.mysql.cj.jdbc.Driver\nspring.shardingsphere.datasource.ds0.idleTimeoutMilliseconds=60000\nspring.shardingsphere.datasource.ds0.jdbc-url=jdbc:mysql://120.79.150.146:3306/dcloud_shop?useUnicode=true&characterEncoding=utf-8&useSSL=false&serverTimezone=Asia/Shanghai&allowPublicKeyRetrieval=true\nspring.shardingsphere.datasource.ds0.maintenanceIntervalMilliseconds=30000\nspring.shardingsphere.datasource.ds0.maxLifetimeMilliseconds=1800000\nspring.shardingsphere.datasource.ds0.maxPoolSize=50\nspring.shardingsphere.datasource.ds0.minPoolSize=50\nspring.shardingsphere.datasource.ds0.password=xdclass.net168\nspring.shardingsphere.datasource.ds0.type=com.zaxxer.hikari.HikariDataSource\nspring.shardingsphere.datasource.ds0.username=root\nspring.shardingsphere.props.sql.show=true\n\n\n\n#----------配置默认数据库，比如短链域名，不分库分表--------------\nspring.shardingsphere.sharding.default-data-source-name=ds0\n#默认id生成策略\nspring.shardingsphere.sharding.default-key-generator.column=id\nspring.shardingsphere.sharding.default-key-generator.type=SNOWFLAKE\nspring.shardingsphere.sharding.default-key-generator.props.worker.id=${workerId}\n\n\n# 指定product_order表的数据分布情况，配置数据节点,行表达式标识符使用 ${...} 或 $->{...}，但前者与 Spring 本身的文件占位符冲突，所以在 Spring 环境中建议使用 $->{...}\nspring.shardingsphere.sharding.tables.product_order.actual-data-nodes=ds0.product_order_$->{0..1}\n#水平分表策略+行表达式分片\nspring.shardingsphere.sharding.tables.product_order.table-strategy.inline.algorithm-expression=product_order_$->{ account_no % 2 }\nspring.shardingsphere.sharding.tables.product_order.table-strategy.inline.sharding-column=account_no\n\n\n\n\n#-------redis连接配置-------\nspring.redis.client-type=jedis\nspring.redis.host=120.24.7.58\nspring.redis.password=xdclass.net\nspring.redis.port=6379\nspring.redis.jedis.pool.max-active=100\nspring.redis.jedis.pool.max-idle=100\nspring.redis.jedis.pool.min-idle=100\nspring.redis.jedis.pool.max-wait=60000\n\n\n\n##----------rabbit配置--------------\nspring.rabbitmq.host=112.74.107.230\nspring.rabbitmq.port=5672\n#需要手工创建虚拟主机\nspring.rabbitmq.virtual-host=dev\nspring.rabbitmq.username=admin\nspring.rabbitmq.password=password\n#消息确认方式，manual(手动ack) 和auto(自动ack); 消息消费重试到达指定次数进到异常交换机和异常队列，需要改为自动ack确认消息\nspring.rabbitmq.listener.simple.acknowledge-mode=auto\n\n\n#开启重试，消费者代码不能添加try catch捕获不往外抛异常\nspring.rabbitmq.listener.simple.retry.enabled=true\n#最大重试次数\nspring.rabbitmq.listener.simple.retry.max-attempts=4\n# 重试消息的时间间隔，5秒\nspring.rabbitmq.listener.simple.retry.initial-interval=5000\n\n\n\n##----------微信支付参数--------------\n\n#商户号\npay.wechat.mch-id=1601644442\n#公众号id 需要和商户号绑定\npay.wechat.wx-pay-appid=wx5beac15ca207c40c\n#商户证书序列号,需要和证书对应\npay.wechat.mch-serial-no=7064ADC5FE84CA2A3DDE71A692E39602DEB96E61\n#API V3密钥\npay.wechat.api-v3-key=adP9a0wWjITE5n2oKNP5lfYesxdclass\n\n#商户私钥路径（微信服务端会根据证书序列号，找到证书获取公钥进行解密数据）\npay.wechat.private-key-path=classpath:/cert/apiclient_key.pem\n#支付成功页面跳转\npay.wechat.success-return-url=https://xdclass.net\n#支付成功，回调通知\npay.wechat.callback-url=http://gvf84j.natappfree.cc/api/callback/order/v1/wechat\n\n\n\n\nlogging.level.com.alibaba.nacos.client.config.impl=WARN\nlogging.level.root=INFO', '3033d3db4037837a5266a403d04c0926', '2022-04-24 18:41:29', '2022-04-24 05:41:29', 'nacos', '172.31.101.9', 'U', '');
COMMIT;

-- ----------------------------
-- Table structure for permissions
-- ----------------------------
DROP TABLE IF EXISTS `permissions`;
CREATE TABLE `permissions` (
  `role` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_bin NOT NULL,
  `resource` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_bin NOT NULL,
  `action` varchar(8) CHARACTER SET utf8mb4 COLLATE utf8mb4_bin NOT NULL,
  UNIQUE KEY `uk_role_permission` (`role`,`resource`,`action`) USING BTREE
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_bin;

-- ----------------------------
-- Records of permissions
-- ----------------------------
BEGIN;
INSERT INTO `permissions` VALUES ('read_only', ':*:*', 'r');
COMMIT;

-- ----------------------------
-- Table structure for roles
-- ----------------------------
DROP TABLE IF EXISTS `roles`;
CREATE TABLE `roles` (
  `username` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_bin NOT NULL,
  `role` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_bin NOT NULL,
  UNIQUE KEY `idx_user_role` (`username`,`role`) USING BTREE
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_bin;

-- ----------------------------
-- Records of roles
-- ----------------------------
BEGIN;
INSERT INTO `roles` VALUES ('nacos', 'ROLE_ADMIN');
INSERT INTO `roles` VALUES ('read_only', 'read_only');
COMMIT;

-- ----------------------------
-- Table structure for tenant_capacity
-- ----------------------------
DROP TABLE IF EXISTS `tenant_capacity`;
CREATE TABLE `tenant_capacity` (
  `id` bigint unsigned NOT NULL AUTO_INCREMENT COMMENT '主键ID',
  `tenant_id` varchar(128) CHARACTER SET utf8 COLLATE utf8_bin NOT NULL DEFAULT '' COMMENT 'Tenant ID',
  `quota` int unsigned NOT NULL DEFAULT '0' COMMENT '配额，0表示使用默认值',
  `usage` int unsigned NOT NULL DEFAULT '0' COMMENT '使用量',
  `max_size` int unsigned NOT NULL DEFAULT '0' COMMENT '单个配置大小上限，单位为字节，0表示使用默认值',
  `max_aggr_count` int unsigned NOT NULL DEFAULT '0' COMMENT '聚合子配置最大个数',
  `max_aggr_size` int unsigned NOT NULL DEFAULT '0' COMMENT '单个聚合数据的子配置大小上限，单位为字节，0表示使用默认值',
  `max_history_count` int unsigned NOT NULL DEFAULT '0' COMMENT '最大变更历史数量',
  `gmt_create` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT '创建时间',
  `gmt_modified` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT '修改时间',
  PRIMARY KEY (`id`),
  UNIQUE KEY `uk_tenant_id` (`tenant_id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb3 COLLATE=utf8_bin COMMENT='租户容量信息表';

-- ----------------------------
-- Records of tenant_capacity
-- ----------------------------
BEGIN;
COMMIT;

-- ----------------------------
-- Table structure for tenant_info
-- ----------------------------
DROP TABLE IF EXISTS `tenant_info`;
CREATE TABLE `tenant_info` (
  `id` bigint NOT NULL AUTO_INCREMENT COMMENT 'id',
  `kp` varchar(128) CHARACTER SET utf8 COLLATE utf8_bin NOT NULL COMMENT 'kp',
  `tenant_id` varchar(128) CHARACTER SET utf8 COLLATE utf8_bin DEFAULT '' COMMENT 'tenant_id',
  `tenant_name` varchar(128) CHARACTER SET utf8 COLLATE utf8_bin DEFAULT '' COMMENT 'tenant_name',
  `tenant_desc` varchar(256) CHARACTER SET utf8 COLLATE utf8_bin DEFAULT NULL COMMENT 'tenant_desc',
  `create_source` varchar(32) CHARACTER SET utf8 COLLATE utf8_bin DEFAULT NULL COMMENT 'create_source',
  `gmt_create` bigint NOT NULL COMMENT '创建时间',
  `gmt_modified` bigint NOT NULL COMMENT '修改时间',
  PRIMARY KEY (`id`),
  UNIQUE KEY `uk_tenant_info_kptenantid` (`kp`,`tenant_id`),
  KEY `idx_tenant_id` (`tenant_id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb3 COLLATE=utf8_bin COMMENT='tenant_info';

-- ----------------------------
-- Records of tenant_info
-- ----------------------------
BEGIN;
COMMIT;

-- ----------------------------
-- Table structure for users
-- ----------------------------
DROP TABLE IF EXISTS `users`;
CREATE TABLE `users` (
  `username` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_bin NOT NULL,
  `password` varchar(500) CHARACTER SET utf8mb4 COLLATE utf8mb4_bin NOT NULL,
  `enabled` tinyint(1) NOT NULL,
  PRIMARY KEY (`username`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_bin;

-- ----------------------------
-- Records of users
-- ----------------------------
BEGIN;
INSERT INTO `users` VALUES ('nacos', '$2a$10$EuWPZHzz32dJN7jexM34MOeYirDdFAZm2kuWj7VEOJhhZkDrxfvUu', 1);
INSERT INTO `users` VALUES ('read_only', '$2a$10$.E.Kw7GeOyJbQWDTSYMKouGPKCoyOQkoSCoAfVeFApFMkuZ2xgS5y', 1);
COMMIT;

SET FOREIGN_KEY_CHECKS = 1;
